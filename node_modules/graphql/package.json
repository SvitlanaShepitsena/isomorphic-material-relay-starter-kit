{
  "_args": [
    [
      "graphql@https://registry.npmjs.org/graphql/-/graphql-0.4.14.tgz",
      "C:\\app\\isomorphic-material-relay-starter-kit"
    ]
  ],
  "_from": "graphql@>=0.4.12 <0.5.0",
  "_id": "graphql@0.4.14",
  "_inCache": true,
  "_location": "/graphql",
  "_phantomChildren": {
    "core-js": "1.2.6"
  },
  "_requested": {
    "name": "graphql",
    "raw": "graphql@https://registry.npmjs.org/graphql/-/graphql-0.4.14.tgz",
    "rawSpec": "https://registry.npmjs.org/graphql/-/graphql-0.4.14.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/graphql/-/graphql-0.4.14.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/graphql/-/graphql-0.4.14.tgz",
  "_shasum": "ccd6206a56b63d13b2a2b102fe123cb2e94cf459",
  "_shrinkwrap": null,
  "_spec": "graphql@https://registry.npmjs.org/graphql/-/graphql-0.4.14.tgz",
  "_where": "C:\\app\\isomorphic-material-relay-starter-kit",
  "bugs": {
    "url": "https://github.com/graphql/graphql-js/issues"
  },
  "contributors": [
    {
      "email": "lee@leebyron.com",
      "name": "Lee Byron",
      "url": "http://leebyron.com/"
    },
    {
      "email": "schrockn@fb.com",
      "name": "Nicholas Schrock"
    },
    {
      "email": "dschafer@fb.com",
      "name": "Daniel Schafer"
    }
  ],
  "dependencies": {
    "babel-runtime": "^5.8.x"
  },
  "description": "A Query Language and Runtime which can target any service.",
  "devDependencies": {
    "babel": "5.8.21",
    "babel-core": "5.8.22",
    "babel-eslint": "4.1.6",
    "chai": "3.4.1",
    "chai-subset": "1.1.0",
    "coveralls": "2.11.4",
    "eslint": "1.10.1",
    "eslint-plugin-babel": "^2.1.1",
    "flow-bin": "0.18.1",
    "isparta": "3.0.3",
    "mocha": "2.3.4",
    "sane": "1.3.0"
  },
  "homepage": "https://github.com/graphql/graphql-js",
  "license": "BSD-3-Clause",
  "main": "index.js",
  "name": "graphql",
  "optionalDependencies": {},
  "options": {
    "mocha": "--require resources/mocha-bootload src/**/__tests__/**/*.js"
  },
  "readme": "# GraphQL.js\n\nThis is a technical preview of the JavaScript reference implementation for\nGraphQL, a query language created by Facebook for describing data requirements\non complex application data models.\n\n[![npm version](https://badge.fury.io/js/graphql.svg)](http://badge.fury.io/js/graphql)\n[![Build Status](https://travis-ci.org/graphql/graphql-js.svg)](https://travis-ci.org/graphql/graphql-js)\n[![Coverage Status](https://coveralls.io/repos/graphql/graphql-js/badge.svg?branch=master)](https://coveralls.io/r/graphql/graphql-js?branch=master)\n[![Public Slack Discussion](https://graphql-slack.herokuapp.com/badge.svg)](https://graphql-slack.herokuapp.com/)\n\nSee more complete documentation at http://graphql.org/ and\nhttp://graphql.org/docs/api-reference-graphql/.\n\n## Technical Preview Contents\n\nThis technical preview contains a [draft specification for GraphQL]\n(https://github.com/facebook/graphql) and a reference implementation in\nJavaScript that implements that draft, GraphQL.js.\n\nThe reference implementation provides base libraries in JavaScript that would\nprovide the basis for full GraphQL implementations and tools. It is not a fully\nstandalone GraphQL server that a client developer could use to start\nmanipulating and querying data. Most importantly, it provides no mapping to a\nfunctioning, production-ready backend. The only “backend” we have targeted for\nthis early preview are in-memory stubs in test cases.\n\nWe are releasing this now because after GraphQL was first discussed publicly,\nmany engineers used this information to implement the parts of the system that\nwe discussed publicly. We want to support those engineers by providing both a\nformal specification and a reference implementation for the system as a whole.\n\nTo that end, the target audience is not the client developer, but those who have\nbuilt or are actively interested in building their own GraphQL implementations and\ntools. Critically, we also want feedback on the system and to incorporate that\nfeedback in our final release.\n\nIn order to be broadly adopted, GraphQL will have to target a wide\nvariety of backends, frameworks, and languages, which will necessitate a\ncollaborative effort across projects and organizations. This technical preview\nmarks the beginning of that process.\n\n## Getting Started\n\nAn overview of GraphQL in general is available in the\n[README](https://github.com/facebook/graphql/blob/master/README.md) for the\n[Specification for GraphQL](https://github.com/facebook/graphql). That overview\ndescribes a simple set of GraphQL examples that exist as [tests](src/__tests__)\nin this repository. A good way to get started with this repository is to walk\nthrough that README and the corresponding tests in parallel.\n\n### Using GraphQL.js\n\nInstall GraphQL.js from npm\n\n```sh\nnpm install --save graphql\n```\n\nGraphQL.js provides two important capabilities: building a type schema, and\nserving queries against that type schema.\n\nFirst, build a GraphQL type schema which maps to your code base.\n\n```js\nimport {\n  graphql,\n  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLString\n} from 'graphql';\n\nvar schema = new GraphQLSchema({\n  query: new GraphQLObjectType({\n    name: 'RootQueryType',\n    fields: {\n      hello: {\n        type: GraphQLString,\n        resolve() {\n          return 'world';\n        }\n      }\n    }\n  })\n});\n```\n\nThis defines a simple schema with one type and one field, that resolves\nto a fixed value. A more complex example is included in the top level\n[tests](src/__tests__) directory.\n\nThen, serve the result of a query against that type schema.\n\n```js\nvar query = '{ hello }';\n\ngraphql(schema, query).then(result => {\n\n  // Prints\n  // {\n  //   data: { hello: \"world\" }\n  // }\n  console.log(result);\n\n});\n```\n\nThis runs a query fetching the one field defined. The `graphql` function will\nfirst ensure the query is syntactically and semantically valid before executing\nit, reporting errors otherwise.\n\n```js\nvar query = '{ boyhowdy }';\n\ngraphql(schema, query).then(result => {\n\n  // Prints\n  // {\n  //   errors: [\n  //     { message: 'Cannot query field boyhowdy on RootQueryType',\n  //       locations: [ { line: 1, column: 3 } ] }\n  //   ]\n  // }\n  console.log(result);\n\n});\n```\n\n### Contributing\n\nWe actively welcome pull requests, learn how to\n[contribute](https://github.com/graphql/graphql-js/blob/master/CONTRIBUTING.md).\n\n### Changelog\n\nChanges are tracked as [Github releases](https://github.com/graphql/graphql-js/releases).\n\n### License\n\nGraphQL is [BSD-licensed](https://github.com/graphql/graphql-js/blob/master/LICENSE).\nWe also provide an additional [patent grant](https://github.com/graphql/graphql-js/blob/master/PATENTS).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/graphql/graphql-js.git"
  },
  "scripts": {
    "build": "babel src --optional runtime --ignore __tests__ --out-dir dist/ && cp package.json dist/",
    "check": "flow check",
    "cover": "babel-node node_modules/.bin/isparta cover --root src --report html node_modules/.bin/_mocha -- $npm_package_options_mocha",
    "cover:lcov": "babel-node node_modules/.bin/isparta cover --root src --report lcovonly node_modules/.bin/_mocha -- $npm_package_options_mocha",
    "lint": "eslint src",
    "prepublish": ". ./resources/prepublish.sh",
    "preversion": ". ./resources/checkgit.sh && npm test",
    "t": "mocha --require resources/mocha-bootload",
    "test": "npm run lint && npm run check && npm run testonly",
    "testonly": "mocha $npm_package_options_mocha",
    "watch": "babel --optional runtime resources/watch.js | node"
  },
  "version": "0.4.14"
}
