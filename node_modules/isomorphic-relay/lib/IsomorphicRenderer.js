'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _GraphQLFragmentPointer = require('react-relay/lib/GraphQLFragmentPointer');

var _GraphQLFragmentPointer2 = _interopRequireDefault(_GraphQLFragmentPointer);

var _reactRelay = require('react-relay');

var _reactRelay2 = _interopRequireDefault(_reactRelay);

var _RelayQuery = require('react-relay/lib/RelayQuery');

var _RelayQuery2 = _interopRequireDefault(_RelayQuery);

var _RelayRenderer2 = require('react-relay/lib/RelayRenderer');

var _RelayRenderer3 = _interopRequireDefault(_RelayRenderer2);

var _RelayStore = require('react-relay/lib/RelayStore');

var _RelayStore2 = _interopRequireDefault(_RelayStore);

var _RelayStoreData = require('react-relay/lib/RelayStoreData');

var _RelayStoreData2 = _interopRequireDefault(_RelayStoreData);

var _checkRelayQueryData = require('react-relay/lib/checkRelayQueryData');

var _checkRelayQueryData2 = _interopRequireDefault(_checkRelayQueryData);

var _flattenSplitRelayQueries = require('react-relay/lib/flattenSplitRelayQueries');

var _flattenSplitRelayQueries2 = _interopRequireDefault(_flattenSplitRelayQueries);

var _splitDeferredRelayQueries = require('react-relay/lib/splitDeferredRelayQueries');

var _splitDeferredRelayQueries2 = _interopRequireDefault(_splitDeferredRelayQueries);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IsomorphicRenderer = function (_RelayRenderer) {
    (0, _inherits3.default)(IsomorphicRenderer, _RelayRenderer);

    function IsomorphicRenderer() {
        (0, _classCallCheck3.default)(this, IsomorphicRenderer);
        return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(IsomorphicRenderer).apply(this, arguments));
    }

    (0, _createClass3.default)(IsomorphicRenderer, [{
        key: '_buildInitialState',

        // Static members are not inherited on <IE11. So, we have to redefine them.
        value: function _buildInitialState() {
            var _props = this.props;
            var Component = _props.Component;
            var forceFetch = _props.forceFetch;
            var queryConfig = _props.queryConfig;

            var querySet = _reactRelay2.default.getQueries(Component, queryConfig);

            var _checkCache = checkCache(querySet);

            var done = _checkCache.done;
            var ready = _checkCache.ready;

            if (ready) {
                var props = (0, _extends3.default)({}, queryConfig.params, createFragmentPointersForRoots(querySet));
                var readyState = {
                    aborted: false,
                    done: done && !forceFetch,
                    error: null,
                    mounted: true,
                    ready: true,
                    stale: !!forceFetch
                };
                return this._buildState(Component, queryConfig, readyState, props);
            }

            return this._buildState(null, null, null, null);
        }
    }, {
        key: '_buildState',
        value: function _buildState(activeComponent, activeQueryConfig, readyState, props) {
            var _this2 = this;

            return {
                activeComponent: activeComponent,
                activeQueryConfig: activeQueryConfig,
                readyState: readyState && (0, _extends3.default)({}, readyState, { mounted: true }),
                renderArgs: {
                    done: !!readyState && readyState.done,
                    error: readyState && readyState.error,
                    props: props,
                    retry: function retry() {
                        return _this2._retry();
                    },
                    stale: !!readyState && readyState.stale
                }
            };
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var readyState = this.state.readyState;

            if (!readyState || !readyState.done) {
                this._runQueries(this.props);
            }
        }
    }, {
        key: '_runQueries',
        value: function _runQueries(_ref) {
            var _this3 = this;

            var Component = _ref.Component;
            var forceFetch = _ref.forceFetch;
            var queryConfig = _ref.queryConfig;

            if (!this.state) {
                // _runQueries should not be called on server side,
                // so don't call it from constructor, and call it from componentDidMount instead
                return this._buildInitialState();
            }

            var querySet = _reactRelay2.default.getQueries(Component, queryConfig);
            var onReadyStateChange = function onReadyStateChange(readyState) {
                if (!_this3.mounted) {
                    _this3._handleReadyStateChange((0, _extends3.default)({}, readyState, { mounted: false }));
                    return;
                }

                if (request !== _this3.pendingRequest) {
                    // Ignore (abort) ready state if we have a new pending request.
                    return;
                }

                var _state$renderArgs = _this3.state.renderArgs;
                var props = _state$renderArgs.props;
                var stale = _state$renderArgs.stale;

                if (props && !readyState.ready) {
                    // Do not regress the prepared ready state.
                    readyState = (0, _extends3.default)({}, readyState, { ready: true, stale: stale });
                }

                if (readyState.aborted || readyState.done || readyState.error) {
                    _this3.pendingRequest = null;
                } else if (props && stale === readyState.stale) {
                    // Do not override the prepared state if there is nothing new.
                    return;
                }

                if (readyState.ready && !props) {
                    props = (0, _extends3.default)({}, queryConfig.params, createFragmentPointersForRoots(querySet));
                }

                _this3.setState(_this3._buildState(Component, queryConfig, readyState, props));
            };

            if (this.pendingRequest) {
                this.pendingRequest.abort();
            }

            var request = this.pendingRequest = forceFetch ? _RelayStore2.default.forceFetch(querySet, onReadyStateChange) : _RelayStore2.default.primeCache(querySet, onReadyStateChange);

            return this._buildState(this.state.activeComponent, this.state.activeQueryConfig, null, null);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            if (this.pendingRequest) {
                this.pendingRequest.abort();
            }
            this.mounted = false;
        }
    }]);
    return IsomorphicRenderer;
}(_RelayRenderer3.default);

IsomorphicRenderer.displayName = 'IsomorphicRenderer';
IsomorphicRenderer.propTypes = _RelayRenderer3.default.propTypes;
IsomorphicRenderer.childContextTypes = _RelayRenderer3.default.childContextTypes;
exports.default = IsomorphicRenderer;

var queuedStore = _RelayStoreData2.default.getDefaultInstance().getQueuedStore();

function checkCache(querySet) {
    var done = true;
    var ready = (0, _keys2.default)(querySet).every(function (name) {
        return (0, _flattenSplitRelayQueries2.default)((0, _splitDeferredRelayQueries2.default)(querySet[name])).every(function (query) {
            if (!(0, _checkRelayQueryData2.default)(queuedStore, query)) {
                done = false;
                if (!query.isDeferred()) {
                    return false;
                }
            }
            return true;
        });
    });
    return { done: done, ready: ready };
}

function createFragmentPointersForRoots(querySet) {
    var fragmentPointers = {};

    (0, _keys2.default)(querySet).forEach(function (name) {
        fragmentPointers[name] = createFragmentPointerForRoot(querySet[name]);
    });
    return fragmentPointers;
}

var createFragmentPointerForRoot = function createFragmentPointerForRoot(query) {
    return query && _GraphQLFragmentPointer2.default.createForRoot(queuedStore, query);
};