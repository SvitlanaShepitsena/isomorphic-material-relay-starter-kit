{"version":3,"sources":["../../source/plugin/write assets.js"],"names":[],"mappings":"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","file":"write assets.js","sourcesContent":["import fs     from 'fs-extra'\r\nimport path   from 'path'\r\n\r\nimport require_hacker from 'require-hacker'\r\nimport serialize      from '../tools/serialize-javascript'\r\n\r\nimport { exists, clone, replace_all } from '../helpers'\r\nimport { alias_hook } from '../common'\r\n\r\n// writes webpack-assets.json file, which contains assets' file paths\r\nexport default function write_assets(json, options, log)\r\n{\r\n\t// take the passed in options\r\n\toptions = clone(options)\r\n\r\n\t// make webpack stats accessible for asset functions (parser, path, filter)\r\n\toptions.webpack_stats = json\r\n\r\n\tlog.debug('running write assets webpack plugin')\r\n\r\n\tconst development = options.development\r\n\r\n\tif (development)\r\n\t{\r\n\t\tlog.debug(' (development mode is on)')\r\n\t}\r\n\r\n\t// write webpack stats json for debugging purpose\r\n\tif (options.debug)\r\n\t{\r\n\t\t// write webpack stats file\r\n\t\tlog.debug(`writing webpack stats to ${options.webpack_stats_path}`)\r\n\r\n\t\t// write the file\r\n\t\t// (format the JSON for better readability)\r\n\t\tfs.outputFileSync(options.webpack_stats_path, JSON.stringify(json, null, 2))\r\n\t}\r\n\r\n\t// the output object with assets\r\n\tconst output = options.output\r\n\r\n\t// populate the output object with assets\r\n\tpopulate_assets(output, json, options, log)\r\n\r\n\t// write webpack assets info file\r\n\tlog.debug(`writing webpack assets info to ${options.webpack_assets_path}`)\r\n\t// format the JSON for better readability if in debug mode\r\n\tconst assets_info = development ? JSON.stringify(output, null, 2) : JSON.stringify(output)\r\n\t// write the file\r\n\tfs.outputFileSync(options.webpack_assets_path, assets_info)\r\n}\r\n\r\n// populates the output object with assets\r\nfunction populate_assets(output, json, options, log)\r\n{\r\n\t// for each chunk name (\"main\", \"common\", ...)\r\n\tObject.keys(json.assetsByChunkName).forEach(function(name)\r\n\t{\r\n\t\tlog.debug(`getting javascript and styles for chunk \"${name}\"`)\r\n\r\n\t\t// get javascript chunk real file path\r\n\r\n\t\tconst javascript = get_assets(name, 'js')[0]\r\n\t\t// the second asset is usually a source map\r\n\r\n\t\tif (javascript)\r\n\t\t{\r\n\t\t\tlog.debug(` (got javascript)`)\r\n\t\t\toutput.javascript[name] = javascript\r\n\t\t}\r\n\r\n\t\t// get style chunk real file path\r\n\r\n\t\tconst style = get_assets(name, 'css')[0]\r\n\t\t// the second asset is usually a source map\r\n\r\n\t\tif (style)\r\n\t\t{\r\n\t\t\tlog.debug(` (got style)`)\r\n\t\t\toutput.styles[name] = style\r\n\t\t}\r\n\t})\r\n\r\n\t// gets asset paths by name and extension of their chunk\r\n\tfunction get_assets(name, extension = 'js')\r\n\t{\r\n\t\tlet chunk = json.assetsByChunkName[name]\r\n\t\r\n\t\t// a chunk could be a string or an array, so make sure it is an array\r\n\t\tif (!(Array.isArray(chunk)))\r\n\t\t{\r\n\t\t\tchunk = [chunk]\r\n\t\t}\r\n\t\r\n\t\treturn chunk\r\n\t\t\t// filter by extension\r\n\t\t\t.filter(name => path.extname(name) === `.${extension}`)\r\n\t\t\t// adjust the real path (can be http, filesystem)\r\n\t\t\t.map(name => options.assets_base_url + name)\r\n\t}\r\n\r\n\t// one can supply a custom filter\r\n\tconst default_filter = (module, regular_expression) => regular_expression.test(module.name)\r\n\t// one can supply a custom namer\r\n\tconst default_asset_path = module => module.name\r\n\t// one can supply a custom parser\r\n\tconst default_parser = module => module.source\r\n\r\n\t// 1st pass\r\n\tconst parsed_assets = {}\r\n\r\n\t// global paths to parsed asset paths\r\n\tconst global_paths_to_parsed_asset_paths = {}\r\n\r\n\t// define __webpack_public_path__ webpack variable\r\n\t// (resolves \"ReferenceError: __webpack_public_path__ is not defined\")\r\n\tconst define_webpack_public_path = 'var __webpack_public_path__ = ' + JSON.stringify(options.assets_base_url) + ';\\n'\r\n\r\n\t// for each user specified asset type\r\n\tfor (let asset_type of Object.keys(options.assets))\r\n\t{\r\n\t\t// asset type settings\r\n\t\tconst asset_type_settings = options.assets[asset_type]\r\n\r\n\t\t// one can supply his own filter\r\n\t\tconst filter = (asset_type_settings.filter || default_filter) //.bind(this)\r\n\t\t// one can supply his own path parser\r\n\t\tconst extract_asset_path = (asset_type_settings.path || default_asset_path) //.bind(this)\r\n\t\t// one can supply his own parser\r\n\t\tconst parser = (asset_type_settings.parser || default_parser) //.bind(this)\r\n\r\n\t\t// guard agains typos, etc\r\n\t\t\r\n\t\t// for filter\r\n\t\tif (!asset_type_settings.filter)\r\n\t\t{\r\n\t\t\tlog.debug(`No filter specified for \"${asset_type}\" assets. Using a default one.`)\r\n\t\t}\r\n\t\t\r\n\t\t// for path parser\r\n\t\tif (!asset_type_settings.path)\r\n\t\t{\r\n\t\t\tlog.debug(`No path parser specified for \"${asset_type}\" assets. Using a default one.`)\r\n\t\t}\r\n\t\t\r\n\t\t// for parser\r\n\t\tif (!asset_type_settings.parser)\r\n\t\t{\r\n\t\t\tlog.debug(`No parser specified for \"${asset_type}\" assets. Using a default one.`)\r\n\t\t}\r\n\r\n\t\tlog.debug(`parsing assets of type \"${asset_type}\"`)\r\n\r\n\t\t// timer start\r\n\t\tconst began_at = new Date().getTime()\r\n\r\n\t\t// get real paths for all the files from this asset type\r\n\t\tjson.modules\r\n\t\t\t// take just modules of this asset type\r\n\t\t\t.filter(module => \r\n\t\t\t{\r\n\t\t\t\t// check that this asset is of the asset type\r\n\t\t\t\tif (!filter(module, options.regular_expressions[asset_type], options, log))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// guard against an empty source.\r\n\t\t\t\tif (!module.source)\r\n\t\t\t\t{\r\n\t\t\t\t\tlog.error(`Module \"${module.name}\" has no source. Maybe Webpack compilation of this module failed. Skipping this asset.`)\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// include this asset\r\n\t\t\t\treturn true\r\n\t\t\t})\r\n\t\t\t.reduce((set, module) =>\r\n\t\t\t{\r\n\t\t\t\t// determine asset real path\r\n\t\t\t\tconst asset_path = extract_asset_path(module, options, log)\r\n\r\n\t\t\t\t// asset module source, or asset content (or whatever else)\r\n\t\t\t\tconst parsed_asset = parser(module, options, log)\r\n\r\n\t\t\t\tlog.trace(`Adding assset \"${asset_path}\", module id ${module.id} (in webpack-stats.debug.json)`)\r\n\r\n\t\t\t\t// check for naming collisions (just in case)\r\n\t\t\t\tif (exists(set[asset_path]))\r\n\t\t\t\t{\r\n\t\t\t\t\tlog.error('-----------------------------------------------------------------')\r\n\t\t\t\t\tlog.error(`Asset with path \"${asset_path}\" was overwritten because of path collision.`)\r\n\t\t\t\t\tlog.error(`Use the \"filter\" function of this asset type to narrow the results.`)\r\n\t\t\t\t\tlog.error(`Previous asset with this path:`)\r\n\t\t\t\t\tlog.error(set[asset_path])\r\n\t\t\t\t\tlog.error(`New asset with this path:`)\r\n\t\t\t\t\tlog.error(parsed_asset)\r\n\t\t\t\t\tlog.error('-----------------------------------------------------------------')\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// add this asset to the list\r\n\t\t\t\t//\r\n\t\t\t\t// also resolve \"ReferenceError: __webpack_public_path__ is not defined\".\r\n\t\t\t\t// because it may be a url-loaded resource (e.g. a font inside a style).\r\n\t\t\t\tset[asset_path] = define_webpack_public_path + require_hacker.to_javascript_module_source(parsed_asset)\r\n\r\n\t\t\t\t// add path mapping\r\n\t\t\t\tglobal_paths_to_parsed_asset_paths[path.resolve(options.project_path, asset_path)] = asset_path\r\n\r\n\t\t\t\t// continue\r\n\t\t\t\treturn set\r\n\t\t\t},\r\n\t\t\tparsed_assets)\r\n\r\n\t\t// timer stop\r\n\t\tlog.debug(` time taken: ${new Date().getTime() - began_at} ms`)\r\n\t}\r\n\r\n\t// register a special require() hook for requiring() raw webpack modules\r\n\tconst require_hook = require_hacker.global_hook('webpack-module', (path, module) =>\r\n\t{\r\n\t\tlog.debug(`require()ing \"${path}\"`)\r\n\r\n\t\t// if Webpack aliases are supplied\r\n\t\tif (options.alias)\r\n\t\t{\r\n\t\t\t// possibly alias the path\r\n\t\t\tconst aliased_global_path = alias_hook(path, module, options.project_path, options.alias, log)\r\n\r\n\t\t\t// if an alias is found\r\n\t\t\tif (aliased_global_path)\r\n\t\t\t{\r\n\t\t\t\treturn require_hacker.to_javascript_module_source(require(aliased_global_path))\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// find an asset with this path\r\n\t\t//\r\n\t\t// the require()d path will be global path in case of the for..of require() loop \r\n\t\t// for the assets (the code a couple of screens below).\r\n\t\t// \r\n\t\t// (it can be anything in other cases (e.g. nested require() calls from the assets))\r\n\t\t//\r\n\t\tif (exists(global_paths_to_parsed_asset_paths[path]))\r\n\t\t{\r\n\t\t\tlog.debug(` found in parsed assets`)\r\n\t\t\treturn parsed_assets[global_paths_to_parsed_asset_paths[path]]\r\n\t\t}\r\n\r\n\t\tlog.debug(` not found in parsed assets, searching in webpack stats`)\r\n\r\n\t\t// find a webpack module which has a reason with this path\r\n\t\t\r\n\t\tconst candidates = []\r\n\r\n\t\tfor (let module of json.modules)\r\n\t\t{\r\n\t\t\tfor (let reason of module.reasons)\r\n\t\t\t{\r\n\t\t\t\tif (reason.userRequest === path)\r\n\t\t\t\t{\r\n\t\t\t\t\tcandidates.push(module)\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// guard against ambiguity \r\n\t\t// (some kind of a sophisticated algorythm could possibly resolve ambiguity)\r\n\r\n\t\tif (candidates.length === 0)\r\n\t\t{\r\n\t\t\t// no candidates found\r\n\t\t}\r\n\t\telse if (candidates.length > 1)\r\n\t\t{\r\n\t\t\tlog.error(` More than a single candidate module was found in webpack stats for require()d path \"${path}\"`)\r\n\r\n\t\t\tfor (let candidate of candidates)\r\n\t\t\t{\r\n\t\t\t\tlog.info(' ', candidate)\r\n\t\t\t}\r\n\r\n\t\t\tthrow new Error(`More than a single candidate module was found in webpack stats`)\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlog.debug(` found in webpack stats, module id ${candidates[0].id}`)\r\n\r\n\t\t\t// also resolve \"ReferenceError: __webpack_public_path__ is not defined\".\r\n\t\t\t// because it may be a url-loaded resource (e.g. a font inside a style).\r\n\t\t\treturn define_webpack_public_path + candidates[0].source\r\n\t\t}\r\n\t})\r\n\r\n\tlog.debug(`compiling assets`)\r\n\r\n\t// timer start\r\n\tconst began_at = new Date().getTime()\r\n\r\n\t// evaluate parsed assets source code\r\n\tfor (let asset_path of Object.keys(parsed_assets))\r\n\t{\r\n\t\t// set asset value\r\n\t\toutput.assets[asset_path] = require(path.resolve(options.project_path, asset_path))\r\n\r\n\t\t// inside that require() call above\r\n\t\t// all the assets are resolved relative to this `module`,\r\n\t\t// which is irrelevant because they are all absolute filesystem paths.\r\n\t\t//\r\n\t\t// if in some of those assets a nested require() call is present\r\n\t\t// then it will be resolved relative to that asset folder.\r\n\t}\r\n\r\n\t// unmount the previously installed require() hook\r\n\trequire_hook.unmount()\r\n\r\n\t// timer stop\r\n\tlog.debug(` time taken: ${new Date().getTime() - began_at} ms`)\r\n}"]}