{"version":3,"sources":["../../source/tools/serialize-javascript.js"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;;AAEb,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE3B,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;;AAE3B,IAAI,oBAAoB,GAAG,4BAA4B;IACnD,kBAAkB,GAAK,kCAAkC;IACzD,kBAAkB,GAAK,qBAAqB,CAAC;;;;AAIjD,IAAI,aAAa,GAAG;AAChB,OAAG,EAAO,SAAS;AACnB,OAAG,EAAO,SAAS;AACnB,OAAG,EAAO,SAAS;AACnB,YAAQ,EAAE,SAAS;AACnB,YAAQ,EAAE,SAAS;CACtB,CAAC;;AAEF,SAAS,SAAS,CAAC,GAAG,EAAE;AACpB,QAAI,SAAS,GAAG,EAAE;QACd,OAAO,GAAK,EAAE;QACd,GAAG,CAAC;;;;;AAKR,OAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,UAAU,GAAG,EAAE,KAAK,EAAE;AAC5C,YAAI,OAAO,KAAK,KAAK,UAAU,EAAE;AAC7B,mBAAO,cAAc,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA,GAAI,KAAK,CAAC;SAC/D;;AAED,YAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;AACtB,mBAAO,YAAY,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA,GAAI,KAAK,CAAC;SAC3D;;AAED,eAAO,KAAK,CAAC;KAChB,CAAC,CAAC;;;;AAIH,QAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AACzB,eAAO,MAAM,CAAC,GAAG,CAAC,CAAC;KACtB;;;;;;;;;AASD,QAAI,EAAE,SAAS,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAA,EAAG;AACvC,eAAO,GAAG,CAAC;KACd;;;;;AAKD,WAAO,GAAG,CAAC,OAAO,CAAC,kBAAkB,EAAE,UAAU,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE;AACjE,YAAI,IAAI,KAAK,QAAQ,EAAE;AACnB,mBAAO,OAAO,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;SACpC;;AAED,YAAI,EAAE,GAAa,SAAS,CAAC,KAAK,CAAC;YAC/B,YAAY,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;;AAEjC,YAAI,oBAAoB,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;AACzC,kBAAM,IAAI,SAAS,CAAC,+BAA+B,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;SAClE;;AAED,eAAO,YAAY,CAAC;KACvB,CAAC,CAAC;CACN","file":"serialize-javascript.js","sourcesContent":["/*\r\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\r\nCopyrights licensed under the New BSD License.\r\nSee the accompanying LICENSE file for terms.\r\n*/\r\n\r\n'use strict';\r\n\r\nvar util = require('util');\r\n\r\nmodule.exports = serialize;\r\n\r\nvar IS_NATIVE_CODE_REGEX = /\\{\\s*\\[native code\\]\\s*\\}/g,\r\n    PLACE_HOLDER_REGEX   = /\"@__(FUNCTION|REGEXP)_(\\d+)__@\"/g,\r\n    UNSAFE_CHARS_REGEX   = /[<>\\/\\u2028\\u2029]/g;\r\n\r\n// Mapping of unsafe HTML and invalid JavaScript line terminator chars to their\r\n// Unicode char counterparts which are safe to use in JavaScript strings.\r\nvar UNICODE_CHARS = {\r\n    '<'     : '\\\\u003C',\r\n    '>'     : '\\\\u003E',\r\n    '/'     : '\\\\u002F',\r\n    '\\u2028': '\\\\u2028',\r\n    '\\u2029': '\\\\u2029'\r\n};\r\n\r\nfunction serialize(obj) {\r\n    var functions = [],\r\n        regexps   = [],\r\n        str;\r\n\r\n    // Creates a JSON string representation of the object and uses placeholders\r\n    // for functions and regexps (identified by index) which are later\r\n    // replaced.\r\n    str = JSON.stringify(obj, function (key, value) {\r\n        if (typeof value === 'function') {\r\n            return '@__FUNCTION_' + (functions.push(value) - 1) + '__@';\r\n        }\r\n\r\n        if (util.isRegExp(value)) {\r\n            return '@__REGEXP_' + (regexps.push(value) - 1) + '__@';\r\n        }\r\n\r\n        return value;\r\n    });\r\n\r\n    // Protects against `JSON.stringify()` returning `undefined`, by serializing\r\n    // to the literal string: \"undefined\".\r\n    if (typeof str !== 'string') {\r\n        return String(str);\r\n    }\r\n\r\n    // // Replace unsafe HTML and invalid JavaScript line terminator chars with\r\n    // // their safe Unicode char counterpart. This _must_ happen before the\r\n    // // regexps and functions are serialized and added back to the string.\r\n    // str = str.replace(UNSAFE_CHARS_REGEX, function (unsafeChar) {\r\n    //     return UNICODE_CHARS[unsafeChar];\r\n    // });\r\n\r\n    if (!(functions.length || regexps.length)) {\r\n        return str;\r\n    }\r\n\r\n    // Replaces all occurrences of function and regexp placeholders in the JSON\r\n    // string with their string representations. If the original value can not\r\n    // be found, then `undefined` is used.\r\n    return str.replace(PLACE_HOLDER_REGEX, function (match, type, index) {\r\n        if (type === 'REGEXP') {\r\n            return regexps[index].toString();\r\n        }\r\n\r\n        var fn           = functions[index],\r\n            serializedFn = fn.toString();\r\n\r\n        if (IS_NATIVE_CODE_REGEX.test(serializedFn)) {\r\n            throw new TypeError('Serializing native function: ' + fn.name);\r\n        }\r\n\r\n        return serializedFn;\r\n    });\r\n}"]}