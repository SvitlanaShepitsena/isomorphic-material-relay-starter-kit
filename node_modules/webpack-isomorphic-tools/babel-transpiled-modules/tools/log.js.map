{"version":3,"sources":["../../source/tools/log.js"],"names":[],"mappings":";;;;;;;;0BAAmB,aAAa;;;;IAEX,GAAG;AAEZ,UAFS,GAAG,CAEX,QAAQ,EAAE,OAAO,EAC7B;wBAHoB,GAAG;;AAItB,MAAI,CAAC,OAAO,GAAG,OAAO,CAAA;;;AAGtB,MAAI,CAAC,QAAQ,SAAO,QAAQ,MAAG,CAAA;EAC/B;;;;AARmB,IAAG,WAWvB,IAAI,GAAA,gBACJ;oCADQ,UAAU;AAAV,aAAU;;;AAEjB,SAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,oBAAoB,CAAC,UAAU,CAAC,CAAC,CAAA;EAC5D;;;;AAdmB,IAAG,WAiBvB,KAAK,GAAA,iBACL;AACC,MAAI,IAAI,CAAC,OAAO,CAAC,KAAK,EACtB;sCAHQ,UAAU;AAAV,cAAU;;;AAIjB,UAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,oBAAoB,CAAC,UAAU,CAAC,CAAC,CAAA;GACvE;EACD;;;;AAvBmB,IAAG,WA0BvB,KAAK,GAAA,iBACL;AACC,MAAI,IAAI,CAAC,OAAO,CAAC,KAAK,EACtB;sCAHQ,UAAU;AAAV,cAAU;;;AAIjB,UAAO,CAAC,GAAG,CAAC,wBAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,oBAAoB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;GACpF;EACD;;;;AAhCmB,IAAG,WAmCvB,OAAO,GAAA,mBACP;qCADW,UAAU;AAAV,aAAU;;;AAEpB,SAAO,CAAC,GAAG,CAAC,wBAAO,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,EAAE,oBAAoB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;EACxF;;;;AAtCmB,IAAG,WAyCvB,KAAK,GAAA,iBACL;qCADS,UAAU;AAAV,aAAU;;;AAElB,SAAO,CAAC,GAAG,CAAC,wBAAO,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,oBAAoB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;EACnF;;QA5CmB,GAAG;;;qBAAH,GAAG;;;AAgDxB,SAAS,oBAAoB,CAAC,UAAU,EACxC;;AAEC,QAAO,UAAU,CAAC,GAAG,CAAC,UAAA,QAAQ,EAC9B;;AAEC,MAAI,OAAO,QAAQ,KAAK,QAAQ,EAChC;;AAEC,OAAI,QAAQ,YAAY,KAAK,EAC7B;AACC,WAAO,QAAQ,CAAC,KAAK,CAAA;IACrB;;AAED,UAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA;GACxC;;AAED,MAAI,OAAO,QAAQ,KAAK,WAAW,EACnC;AACC,UAAO,aAAa,CAAA;GACpB;;AAED,SAAO,QAAQ,CAAC,QAAQ,EAAE,CAAA;EAC1B,CAAC;;EAED,MAAM,CAAC,UAAC,OAAO,EAAE,QAAQ,EAC1B;AACC,MAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EACtB;AACC,UAAO,IAAI,GAAG,CAAA;GACd;AACD,SAAO,OAAO,GAAG,QAAQ,CAAA;EACzB,EACD,EAAE,CAAC,CAAA;CACH","file":"log.js","sourcesContent":["import colors from 'colors/safe'\r\n\r\nexport default class Log\r\n{\r\n\tconstructor(preamble, options)\r\n\t{\r\n\t\tthis.options = options\r\n\r\n\t\t// is prepended to console output\r\n\t\tthis.preamble = `[${preamble}]`\r\n\t}\r\n\r\n\t// outputs info to the log\r\n\tinfo(...parameters)\r\n\t{\r\n\t\tconsole.log(this.preamble, generate_log_message(parameters))\r\n\t}\r\n\r\n\t// outputs debugging info to the log\r\n\tdebug(...parameters)\r\n\t{\r\n\t\tif (this.options.debug)\r\n\t\t{\r\n\t\t\tconsole.log(this.preamble, '[debug]', generate_log_message(parameters))\r\n\t\t}\r\n\t}\r\n\r\n\t// outputs minor debugging info to the log\r\n\ttrace(...parameters)\r\n\t{\r\n\t\tif (this.options.debug)\r\n\t\t{\r\n\t\t\tconsole.log(colors.gray(this.preamble, '[trace]', generate_log_message(parameters)))\r\n\t\t}\r\n\t}\r\n\r\n\t// outputs a warning to the log\r\n\twarning(...parameters)\r\n\t{\r\n\t\tconsole.log(colors.yellow(this.preamble, '[warning]', generate_log_message(parameters)))\r\n\t}\r\n\r\n\t// outputs an error to the log\r\n\terror(...parameters)\r\n\t{\r\n\t\tconsole.log(colors.red(this.preamble, '[error]', generate_log_message(parameters)))\r\n\t}\r\n}\r\n\r\n// transforms arguments to text\r\nfunction generate_log_message(parameters)\r\n{\r\n\t// преобразовать все аргументы функции в текстовый вид\r\n\treturn parameters.map(argument =>\r\n\t{\r\n\t\t// преобразование объектов в строку\r\n\t\tif (typeof argument === 'object')\r\n\t\t{\r\n\t\t\t// для ошибок - распечатывать стек вызовов\r\n\t\t\tif (argument instanceof Error)\r\n\t\t\t{\r\n\t\t\t\treturn argument.stack\r\n\t\t\t}\r\n\t\t\t// для остальных объектов вызывать JSON.stringify()\r\n\t\t\treturn JSON.stringify(argument, null, 2)\r\n\t\t}\r\n\t\t// если undefined\r\n\t\tif (typeof argument === 'undefined')\r\n\t\t{\r\n\t\t\treturn '[undefined]'\r\n\t\t}\r\n\t\t// прочие переменные - просто .toString()\r\n\t\treturn argument.toString()\r\n\t})\r\n\t// собрать всё это в одну строку через пробел\r\n\t.reduce((message, argument) =>\r\n\t{\r\n\t\tif (message.length > 0)\r\n\t\t{\r\n\t\t\tmessage += ' '\r\n\t\t}\r\n\t\treturn message + argument\r\n\t},\r\n\t'')\r\n}"]}