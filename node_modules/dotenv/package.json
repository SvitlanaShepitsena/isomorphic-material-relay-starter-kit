{
  "_args": [
    [
      "dotenv@https://registry.npmjs.org/dotenv/-/dotenv-1.2.0.tgz",
      "C:\\App\\isomorphic-material-relay-starter-kit"
    ]
  ],
  "_from": "dotenv@>=1.2.0 <2.0.0",
  "_id": "dotenv@1.2.0",
  "_inCache": true,
  "_location": "/dotenv",
  "_phantomChildren": {},
  "_requested": {
    "name": "dotenv",
    "raw": "dotenv@https://registry.npmjs.org/dotenv/-/dotenv-1.2.0.tgz",
    "rawSpec": "https://registry.npmjs.org/dotenv/-/dotenv-1.2.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/dotenv/-/dotenv-1.2.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/dotenv/-/dotenv-1.2.0.tgz",
  "_shasum": "7cd73e16e07f057c8072147a5bc3a8677f0ab5c6",
  "_shrinkwrap": null,
  "_spec": "dotenv@https://registry.npmjs.org/dotenv/-/dotenv-1.2.0.tgz",
  "_where": "C:\\App\\isomorphic-material-relay-starter-kit",
  "author": {
    "name": "scottmotte"
  },
  "bugs": {
    "url": "https://github.com/motdotla/dotenv/issues"
  },
  "dependencies": {},
  "description": "Loads environment variables from .env file",
  "devDependencies": {
    "lab": "^5.3.0",
    "semver": "^4.3.6",
    "should": "4.4.2",
    "sinon": "1.12.2",
    "standard": "^2.10.0"
  },
  "homepage": "https://github.com/motdotla/dotenv#readme",
  "keywords": [
    "dotenv",
    "env",
    ".env",
    "environment",
    "variables",
    "config",
    "settings"
  ],
  "license": "BSD-2-Clause",
  "main": "lib/main.js",
  "name": "dotenv",
  "optionalDependencies": {},
  "readme": "# dotenv\n\n<img src=\"https://raw.githubusercontent.com/motdotla/dotenv/master/dotenv.png\" alt=\"dotenv\" align=\"right\" />\n\nDotenv loads environment variables from `.env` into `ENV` (process.env).\n\n[![BuildStatus](https://img.shields.io/travis/motdotla/dotenv/master.svg?style=flat-square)](https://travis-ci.org/motdotla/dotenv)\n[![NPM version](https://img.shields.io/npm/v/dotenv.svg?style=flat-square)](https://www.npmjs.com/package/dotenv)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n\n> \"Storing [configuration in the environment](http://www.12factor.net/config)\n> is one of the tenets of a [twelve-factor app](http://www.12factor.net/).\n> Anything that is likely to change between deployment environments–such as\n> resource handles for databases or credentials for external services–should be\n> extracted from the code into environment variables.\n>\n> But it is not always practical to set environment variables on development\n> machines or continuous integration servers where multiple projects are run.\n> Dotenv loads variables from a `.env` file into ENV when the environment is\n> bootstrapped.\"\n>\n> [Brandon Keepers' Dotenv in Ruby](https://github.com/bkeepers/dotenv)\n\n## Install\n\n```bash\nnpm install dotenv --save\n```\n\n## Usage\n\nAs early as possible in your application, require and load dotenv.\n\n```javascript\nrequire('dotenv').load();\n```\n\nCreate a `.env` file in the root directory of your project. Add\nenvironment-specific variables on new lines in the form of `NAME=VALUE`.\nFor example:\n\n```\nDB_HOST=localhost\nDB_USER=root\nDB_PASS=s1mpl3\n```\n\nThat's it.\n\n`process.env` now has the keys and values you defined in your `.env` file.\n\n```javascript\ndb.connect({\n  host: process.env.DB_HOST,\n  username: process.env.DB_USER,\n  password: process.env.DB_PASS\n});\n```\n\n### Preload\n\nIf you are using iojs-v1.6.0 or later, you can use the `--require` (`-r`) command line option to preload dotenv. By doing this, you do not need to require and load dotenv in your application code.\n\n\n```bash\n$ node -r dotenv/config your_script.js\n```\n\nThe configuration options below are supported as command line arguments in the format `dotenv_config_<option>=value`\n\n```bash\n$ node -r dotenv/config your_script.js dotenv_config_path=/custom/path/to/your/env/vars\n```\n\n## Config\n\n`config` will read your .env file, parse the contents, and assign it to\n`process.env` - just like `load` does. You can additionally, pass options to\n`config`.\n\nNote: `config` and `load` are synonyms. You can pass options to either.\n\n### Options\n\n#### Silent\n\nDefault: `false`\n\nDotenv outputs a warning to your console if missing a `.env` file. Suppress\nthis warning using silent.\n\n```js\nrequire('dotenv').config({silent: true});\n```\n\n#### Path\n\nDefault: `.env`\n\nYou can specify a custom path if your file containing environment variables is\nnamed or located differently.\n\n```js\nrequire('dotenv').config({path: '/custom/path/to/your/env/vars'});\n```\n\n#### Encoding\n\nDefault: `utf8`\n\nYou may specify the encoding of your file containing environment variables\nusing this option.\n\n```js\nrequire('dotenv').config({encoding: 'base64'});\n```\n\n## Parse\n\nThe engine which parses the contents of your file containing environment\nvariables is available to use. It accepts a String or Buffer and will return\nan Object with the parsed keys and values.\n\n```js\nvar dotenv  = require('dotenv');\nvar buf    = new Buffer('BASIC=basic');\nvar config  = dotenv.parse(buf); // will return an object\nconsole.log(typeof config, config) // object { BASIC : 'basic' }\n```\n\n### Rules\n\nThe parsing engine currently supports the following rules:\n\n- `BASIC=basic` becomes `{BASIC: 'basic'}`\n- empty lines are skipped\n- lines beginning with `#` are treated as comments\n- empty values become empty strings (`EMPTY=` becomes `{EMPTY: ''}`)\n- single and double quoted values are escaped (`SINGLE_QUOTE='quoted'` becomes `{SINGLE_QUOTE: \"quoted\"}`)\n- new lines are expanded if in double quotes (`MULTILINE=\"new\\nline\"` becomes\n\n```\n{MULTILINE: 'new\nline'}\n```\n- inner quotes are maintained (think JSON) (`JSON={\"foo\": \"bar\"}` becomes `{JSON:\"{\\\"foo\\\": \\\"bar\\\"}\"`)\n\n#### Expanding Variables\n\nBasic variable expansion is supported.\n\n```\nBASIC=basic\nTEST=$BASIC\n```\n\nParsing that would result in `{BASIC: 'basic', TEST: 'basic'}`. You can escape\nvariables by quoting or beginning with `\\` (e.g. `TEST=\\$BASIC`). If the\nvariable is not found in the file, `process.env` is checked. Missing variables\nresult in an empty string.\n\n```\nBASIC=basic\nTEST=$TEST\nDNE=$DNE\n```\n\n```bash\nTEST=example node -e 'require(\"dotenv\").config();'\n```\n\n- `process.env.BASIC` would equal `basic`\n- `process.env.TEST` would equal `example`\n- `process.env.DNE` would equal `\"\"`\n\n## FAQ\n\n### Should I commit my .env file?\n\nNo. We **strongly** recommend against committing your .env file to version\ncontrol. It should only include environment-specific values such as database\npasswords or API keys. Your production database should have a different\npassword than your development database.\n\n## Contributing\n\nSee [Contributing Guide](Contributing.md)\n\n## Who's using dotenv\n\nHere's just a few of many repositories using dotenv:\n\n* [npm](https://github.com/npm/newww)\n* [sendgrid-nodejs](https://github.com/sendgrid/sendgrid-nodejs)\n* [handshake.js](https://github.com/handshakejs/handshakejs-api)\n* [google-oauth2-service-account](https://github.com/jacoblwe20/google-oauth2-service-account)\n* [kibble](https://github.com/motdotla/kibble)\n* [github-streaker](https://github.com/motdotla/github-streaker)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/motdotla/dotenv.git"
  },
  "scripts": {
    "lint": "standard",
    "test": "lab test/* --coverage && standard"
  },
  "version": "1.2.0"
}
