{
  "_args": [
    [
      "babel-loader@https://registry.npmjs.org/babel-loader/-/babel-loader-6.2.1.tgz",
      "C:\\app\\isomorphic-material-relay-starter-kit"
    ]
  ],
  "_from": "babel-loader@>=6.2.0 <7.0.0",
  "_id": "babel-loader@6.2.1",
  "_inCache": true,
  "_location": "/babel-loader",
  "_phantomChildren": {},
  "_requested": {
    "name": "babel-loader",
    "raw": "babel-loader@https://registry.npmjs.org/babel-loader/-/babel-loader-6.2.1.tgz",
    "rawSpec": "https://registry.npmjs.org/babel-loader/-/babel-loader-6.2.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/babel-loader/-/babel-loader-6.2.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/babel-loader/-/babel-loader-6.2.1.tgz",
  "_shasum": "1061c9a49f8d5313b7ab73cdcb51dcfff3c485de",
  "_shrinkwrap": null,
  "_spec": "babel-loader@https://registry.npmjs.org/babel-loader/-/babel-loader-6.2.1.tgz",
  "_where": "C:\\app\\isomorphic-material-relay-starter-kit",
  "author": {
    "email": "hello@luiscouto.pt",
    "name": "Luis Couto"
  },
  "bugs": {
    "url": "https://github.com/babel/babel-loader/issues"
  },
  "dependencies": {
    "loader-utils": "^0.2.11",
    "mkdirp": "^0.5.1",
    "object-assign": "^4.0.1"
  },
  "description": "babel module loader for webpack",
  "devDependencies": {
    "expect.js": "^0.3.1",
    "istanbul": "^0.4.0",
    "jscs": "^2.5.0",
    "jshint": "^2.8.0",
    "mkdirp": "^0.5.1",
    "mocha": "^2.3.3",
    "rimraf": "^2.4.3",
    "webpack": "^1.12.2"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "homepage": "https://github.com/babel/babel-loader",
  "keywords": [
    "webpack",
    "loader",
    "6to5",
    "babel",
    "es6",
    "transpiler",
    "module"
  ],
  "license": "MIT",
  "name": "babel-loader",
  "optionalDependencies": {},
  "peerDependencies": {
    "babel-core": "^6.0.0",
    "webpack": "^1.0.0"
  },
  "readme": "# babel-loader [![Build Status](https://travis-ci.org/babel/babel-loader.svg?branch=master)](https://travis-ci.org/babel/babel-loader)\n  > Babel is a compiler for writing next generation JavaScript.\n\n  This package allows transpiling JavaScript files using [Babel](https://github.com/babel/babel) and [webpack](https://github.com/webpack/webpack).\n\n  __Notes:__ Issues with the output should be reported on the babel [issue tracker](https://github.com/babel/babel/issues);\n\n## Installation\n\n```bash\nnpm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev\n```\n\n__Note:__ [npm](https://npmjs.com) will deprecate [auto-installing of peerDependencies](https://github.com/npm/npm/issues/6565) on the next major release, so required peer dependencies like babel-core and webpack will have to be listed explicitly in your `package.json`.\n\n__Note:__ If you're upgrading from babel 5 to babel 6, please take a look [at this guide](https://medium.com/@malyw/how-to-update-babel-5-x-6-x-d828c230ec53#.yqxukuzdk).\n\n## Usage\n\n[Documentation: Using loaders](http://webpack.github.io/docs/using-loaders.html)\n\n  Within your webpack configuration object, you'll need to add the babel-loader to the list of modules, like so:\n\n  ```javascript\nmodule: {\n  loaders: [\n    {\n      test: /\\.jsx?$/,\n      exclude: /(node_modules|bower_components)/,\n      loader: 'babel', // 'babel-loader' is also a legal name to reference\n      query: {\n        presets: ['react', 'es2015']\n      }\n    }\n  ]\n}\n  ```\n\n### Options\n\nSee the `babel` [options](http://babeljs.io/docs/usage/options/).\n\nYou can pass options to the loader by writing them as a [query string](https://github.com/webpack/loader-utils):\n\n  ```javascript\nmodule: {\n  loaders: [\n    {\n      test: /\\.jsx?$/,\n      exclude: /(node_modules|bower_components)/,\n      loader: 'babel?presets[]=react,presets[]=es2015'\n    }\n  ]\n}\n  ```\n\n  or by using the query property:\n\n  ```javascript\nmodule: {\n  loaders: [\n    {\n      test: /\\.jsx?$/,\n      exclude: /(node_modules|bower_components)/,\n      loader: 'babel',\n      query: {\n        presets: ['react', 'es2015']\n      }\n    }\n  ]\n}\n  ```\n\n  This loader also supports the following loader-specific option:\n\n  * `cacheDirectory`: Default `false`. When set, the given directory will be used to cache the results of the loader. Future webpack builds will attempt to read from the cache to avoid needing to run the potentially expensive Babel recompilation process on each run. If the value is blank (`loader: 'babel-loader?cacheDirectory'`) the loader will use the default OS temporary file directory.\n\n  * `cacheIdentifier`: Default is a string composed by the babel-core's version, the babel-loader's version and the contents of .babelrc file if it exists. This can set to a custom value to force cache busting if the identifier changes.\n\n\n  __Note:__ The `sourceMap` option is ignored, instead sourceMaps are automatically enabled when webpack is configured to use them (via the `devtool` config option).\n\n## Troubleshooting\n\n### babel-loader is slow!\n\n  Make sure you are transforming as few files as possible. Because you are probably\n  matching `/\\.js$/`, you might be transforming the `node_modules` folder or other unwanted\n  source.\n\n  To exclude `node_modules`, see the `exclude` option in the `loaders` config as documented above.\n\n  You can also speed up babel-loader by as much as 2x by using the `cacheDirectory` option.\n  This will cache transformations to the filesystem.\n\n### babel is injecting helpers into each file and bloating my code!\n\n  babel uses very small helpers for common functions such as `_extend`. By default\n  this will be added to every file that requires it.\n\n  You can instead require the babel runtime as a separate module to avoid the duplication.\n\n  The following configuration disables automatic per-file runtime injection in babel, instead\n  requiring `babel-plugin-transform-runtime` and making all helper references use it.\n\n  See the [docs](http://babeljs.io/docs/plugins/transform-runtime/) for more information.\n\n  **NOTE:** You must run `npm install babel-plugin-transform-runtime --save` to include this in your project.\n\n```javascript\nloaders: [\n  // the 'transform-runtime' plugin tells babel to require the runtime\n  // instead of inlining it.\n  {\n    test: /\\.jsx?$/,\n    exclude: /(node_modules|bower_components)/,\n    loader: 'babel',\n    query: {\n      presets: ['react', 'es2015'],\n      plugins: ['transform-runtime']\n    }\n  }\n]\n```\n\n### using `cacheDirectory` fails with ENOENT Error\n\nIf using cacheDirectory results in an error similar to the following:\n\n```\nERROR in ./frontend/src/main.jsx\nModule build failed: Error: ENOENT, open 'true/350c59cae6b7bce3bb58c8240147581bfdc9cccc.json.gzip'\n @ multi app\n```\n(notice the `true/` in the filepath)\n\nThat means that most likely, you're not setting the options correctly, and you're doing something similar to:\n\n```javascript\nloaders: [\n  {\n    test: /\\.jsx?$/,\n    exclude: /(node_modules|bower_components)/,\n    loader: 'babel?cacheDirectory=true'\n  }\n]\n```\n\nThat's not the correct way of setting boolean values. You should do instead:\n\n```javascript\nloaders: [\n  {\n    test: /\\.jsx?$/,\n    exclude: /(node_modules|bower_components)/,\n    loader: 'babel?cacheDirectory'\n  }\n]\n```\n\nor use the [query](https://webpack.github.io/docs/using-loaders.html#query-parameters) property:\n\n```javascript\nloaders: [\n  // the optional 'runtime' transformer tells babel to require the runtime\n  // instead of inlining it.\n  {\n    test: /\\.jsx?$/,\n    exclude: /(node_modules|bower_components)/,\n    loader: 'babel',\n    query: {\n      cacheDirectory: true\n    }\n  }\n]\n```\n\n\n### custom polyfills (e.g. Promise library)\n\nSince Babel includes a polyfill that includes a custom [regenerator runtime](https://github.com/facebook/regenerator/blob/master/runtime.js) and [core.js](https://github.com/zloirock/core-js), the following usual shimming method using `webpack.ProvidePlugin` will not work:\n\n```javascript\n// ...\n        new webpack.ProvidePlugin({\n            'Promise': 'bluebird'\n        }),\n// ...\n```\n\nThe following approach will not work either:\n\n```javascript\nrequire('babel-runtime/core-js/promise').default = require('bluebird');\n\nvar promise = new Promise;\n```\n\nwhich outputs to (using `runtime`):\n\n```javascript\n'use strict';\n\nvar _Promise = require('babel-runtime/core-js/promise')['default'];\n\nrequire('babel-runtime/core-js/promise')['default'] = require('bluebird');\n\nvar promise = new _Promise();\n```\n\nThe previous `Promise` library is referenced and used before it is overridden.\n\nOne approach is to have a \"bootstrap\" step in your application that would first override the default globals before your application:\n\n```javascript\n// bootstrap.js\n\nrequire('babel-runtime/core-js/promise').default = require('bluebird');\n\n// ...\n\nrequire('./app');\n```\n\n## [License](http://couto.mit-license.org/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/babel/babel-loader.git"
  },
  "scripts": {
    "cov": "istanbul cover ./node_modules/.bin/_mocha -- test/*.test.js",
    "cs": "jscs --config .jscsrc index.js lib/* test/*",
    "hint": "jshint --config .jshintrc index.js lib/* test/*",
    "test": "npm install babel-core babel-preset-es2015 && npm run hint && npm run cs && npm run cov"
  },
  "version": "6.2.1"
}
