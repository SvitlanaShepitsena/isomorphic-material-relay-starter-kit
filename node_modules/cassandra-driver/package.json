{
  "_args": [
    [
      "cassandra-driver@https://registry.npmjs.org/cassandra-driver/-/cassandra-driver-3.0.0.tgz",
      "C:\\App\\isomorphic-material-relay-starter-kit"
    ]
  ],
  "_from": "cassandra-driver@>=3.0.0 <4.0.0",
  "_id": "cassandra-driver@3.0.0",
  "_inCache": true,
  "_location": "/cassandra-driver",
  "_phantomChildren": {},
  "_requested": {
    "name": "cassandra-driver",
    "raw": "cassandra-driver@https://registry.npmjs.org/cassandra-driver/-/cassandra-driver-3.0.0.tgz",
    "rawSpec": "https://registry.npmjs.org/cassandra-driver/-/cassandra-driver-3.0.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/cassandra-driver/-/cassandra-driver-3.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/cassandra-driver/-/cassandra-driver-3.0.0.tgz",
  "_shasum": "1440f0247709cf19ce89181f7daab58c22fc9a44",
  "_shrinkwrap": null,
  "_spec": "cassandra-driver@https://registry.npmjs.org/cassandra-driver/-/cassandra-driver-3.0.0.tgz",
  "_where": "C:\\App\\isomorphic-material-relay-starter-kit",
  "author": {
    "name": "DataStax"
  },
  "bugs": {
    "url": "https://groups.google.com/a/lists.datastax.com/forum/#!forum/nodejs-driver-user"
  },
  "dependencies": {
    "async": "^1.5.0",
    "long": "^2.2.0"
  },
  "description": "DataStax Node.js Driver for Apache Cassandra",
  "devDependencies": {
    "mocha": ">= 1.14.0",
    "mocha-jenkins-reporter": ">= 0.1.9",
    "rewire": ">= 2.1.0"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "homepage": "https://github.com/datastax/nodejs-driver#readme",
  "keywords": [
    "cassandra",
    "cql",
    "cql3",
    "connection",
    "pool",
    "datastax",
    "nosql",
    "driver",
    "database"
  ],
  "licenses": [
    {
      "type": "Apache License, Version 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "name": "cassandra-driver",
  "optionalDependencies": {},
  "readme": "# DataStax Node.js Driver for Apache Cassandra\n\nA modern, [feature-rich](#features) and highly tunable Node.js client library for Apache Cassandra (1.2+) and DataStax Enterprise (3.1+) using exclusively Cassandra's binary protocol and Cassandra Query Language v3.\n\n## Installation\n\n```bash\n$ npm install cassandra-driver\n```\n\n[![Build Status](https://travis-ci.org/datastax/nodejs-driver.svg?branch=master)](https://travis-ci.org/datastax/nodejs-driver)\n\n## Features\n\n- Simple, Prepared, and Batch statements\n- Asynchronous IO, parallel execution, request pipelining\n- [Connection pooling][pooling]\n- Auto node discovery\n- Automatic reconnection\n- Configurable [load balancing][load-balancing] and [retry policies][retry]\n- Works with any cluster size\n- [Row streaming and pipes](#avoid-buffering)\n\n## Documentation\n\n- [Documentation index][doc-index]\n- [CQL types to javascript types][doc-datatypes]\n- [API docs][doc-api]\n- [FAQ][faq]\n\n## Getting Help\n\nYou can use the [project mailing list][mailinglist] or create a ticket on the [Jira issue tracker][jira].\n\n## Upgrading from 1.x branch\n\nIf you are upgrading from the 1.x branch of the driver, be sure to have a look at the [upgrade guide][upgrade1].\n\n## Basic usage\n\n```javascript\nvar cassandra = require('cassandra-driver');\nvar client = new cassandra.Client({ contactPoints: ['h1', 'h2'], keyspace: 'ks1'});\nvar query = 'SELECT email, last_name FROM user_profiles WHERE key=?';\nclient.execute(query, ['guy'], function(err, result) {\n  assert.ifError(err);\n  console.log('got user profile with email ' + result.rows[0].email);\n});\n```\n\n### Prepare your queries\n\nUsing prepared statements provides multiple benefits.\nPrepared statements are parsed and prepared on the Cassandra nodes and are ready for future execution.\nAlso, when preparing, the driver retrieves information about the parameter types which\n **allows an accurate mapping between a JavaScript type and a Cassandra type**.\n\nThe driver will prepare the query once on each host and execute the statement with the bound parameters.\n\n```javascript\n//Use query markers (?) and parameters\nvar query = 'UPDATE user_profiles SET birth=? WHERE key=?'; \nvar params = [new Date(1942, 10, 1), 'jimi-hendrix'];\n//Set the prepare flag in the query options\nclient.execute(query, params, {prepare: true}, function(err) {\n  assert.ifError(err);\n  console.log('Row updated on the cluster');\n});\n```\n\n### Avoid buffering\n\nWhen using `#eachRow()` and `#stream()` methods, the driver parses each row as soon as it is received,\n yielding rows without buffering them.\n\n```javascript\n//Reducing a large result\nclient.eachRow('SELECT time, val FROM temperature WHERE station_id=', ['abc'],\n  function(n, row) {\n    //the callback will be invoked per each row as soon as they are received\n    minTemperature = Math.min(row.val, minTemperature);\n  },\n  function (err) {\n    assert.ifError(err);\n  }\n);\n```\n\nThe `#stream()` method works in the same way but instead of callback it returns a [Readable Streams2][streams2] object\n in `objectMode` that emits instances of `Row`.\nIt can be **piped** downstream and provides automatic pause/resume logic (it buffers when not read).\n\n```javascript\nclient.stream('SELECT time, val FROM temperature WHERE station_id=', ['abc'])\n  .on('readable', function () {\n    //readable is emitted as soon a row is received and parsed\n    var row;\n    while (row = this.read()) {\n      console.log('time %s and value %s', row.time, row.val);\n    }\n  })\n  .on('end', function () {\n    //stream ended, there aren't any more rows\n  })\n  .on('error', function (err) {\n    //Something went wrong: err is a response error from Cassandra\n  });\n```\n\n### User defined types\n\n[User defined types (UDT)][cql-udt] are represented as Javascript objects.\n\nFor example:\nConsider the following UDT and table\n```cql\nCREATE TYPE address (\n  street text,\n  city text,\n  state text,\n  zip int,\n  phones set<text>\n);\nCREATE TABLE users (\n  name text PRIMARY KEY,\n  email text,\n  address frozen<address>\n);\n```\n\nYou can retrieve the user address details as a regular Javascript object.\n\n```javascript\nvar query = 'SELECT name, email, address FROM users WHERE name = ?';\nclient.execute(query, [name], { prepare: true}, function (err, result) {\n\tvar row = result.first();\n\tvar address = row.address;\n\tconsole.log('User lives in %s, %s - %s', address.street, address.city, address.state); \n});\n```\n\nRead more information  about using [UDTs with the Node.js Driver][doc-udt].\n\n### Paging\n\nAll driver methods use a default `fetchSize` of 5000 rows, retrieving only first page of results up to a\n maximum of 5000 rows to shield an application against accidentally large result sets. To retrieve the following\n records you can use the `autoPage` flag in the query options of `#eachRow()` and `#stream()` methods.\n\n```javascript\n//Imagine a column family with millions of rows\nvar query = 'SELECT * FROM largetable';\nclient.eachRow(query, [], {autoPage: true}, function (n, row) {\n  //This function will be called per each of the rows in all the table\n}, endCallback);\n```\n\n### Batch multiple statements\n\nYou can execute multiple statements in a batch to update/insert several rows atomically even in different column families.\n\n```javascript\nvar queries = [\n  {\n    query: 'UPDATE user_profiles SET email=? WHERE key=?',\n    params: [emailAddress, 'hendrix']\n  },\n  {\n    query: 'INSERT INTO user_track (key, text, date) VALUES (?, ?, ?)',\n    params: ['hendrix', 'Changed email', new Date()]\n  }\n];\nclient.batch(queries, { prepare: true }, function(err) {\n  assert.ifError(err);\n  console.log('Data updated on cluster');\n});\n```\n\n----\n\n## Data types\n\nThere are few data types defined in the ECMAScript specification, this usually represents a problem when you are trying\n to deal with data types that come from other systems in Javascript.\n\nThe driver supports all the CQL data types in Apache Cassandra (2.2 and below) even for types that no built-in\nJavascript representation exists, like decimal, varint and bigint. Check the documentation on working with\n [numerical values][doc-numerical], [uuids][doc-uuid] and [collections][doc-collections].\n\n## Logging\n\nInstances of `Client()` are `EventEmitter` and emit `log` events:\n```javascript\nclient.on('log', function(level, className, message, furtherInfo) {\n  console.log('log event: %s -- %s', level, message);\n});\n```\nThe `level` being passed to the listener can be `verbose`, `info`, `warning` or `error`.\n\n## Feedback Requested\n\n**Help us focus our efforts!** Provide your input on the [Platform and Runtime Survey][survey] (we kept it short).\n\n## Credits\n\nThis driver is based on the original work of [Jorge Bay][jorgebay] on [node-cassandra-cql][old-driver] and adds a series of advanced features that are common across all other [DataStax drivers][drivers] for Apache Cassandra.\n\nThe development effort to provide an up to date, high performance, fully featured Node.js Driver for Apache Cassandra will continue on this project, while [node-cassandra-cql][old-driver] will be discontinued.\n\n## License\n\nCopyright 2015 DataStax\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n\n[cassandra]: http://cassandra.apache.org/\n[doc-api]: http://docs.datastax.com/en/drivers/nodejs/3.0/Client.html\n[doc-index]: http://docs.datastax.com/en/developer/nodejs-driver/3.0/\n[doc-datatypes]: http://docs.datastax.com/en/developer/nodejs-driver/3.0/nodejs-driver/reference/nodejs2Cql3Datatypes.html\n[doc-numerical]: http://docs.datastax.com/en/developer/nodejs-driver/3.0/nodejs-driver/reference/numericalValues.html\n[doc-uuid]: http://docs.datastax.com/en/developer/nodejs-driver/3.0/nodejs-driver/reference/uuids-timeuuids.html\n[doc-collections]: http://docs.datastax.com/en/developer/nodejs-driver/3.0/nodejs-driver/reference/collections.html\n[doc-udt]: http://docs.datastax.com/en/developer/nodejs-driver/3.0/nodejs-driver/reference/userDefinedTypes.html\n[faq]: http://docs.datastax.com/en/developer/nodejs-driver/3.0/nodejs-driver/faq/njdFaq.html\n[load-balancing]: http://docs.datastax.com/en/developer/nodejs-driver/3.0/common/drivers/reference/tuningPolicies.html\n[retry]: http://docs.datastax.com/en/developer/nodejs-driver/3.0/common/drivers/reference/tuningPolicies.html#retry-policy\n[pooling]: http://docs.datastax.com/en/developer/nodejs-driver/3.0/nodejs-driver/reference/poolingConfiguration.html\n[upgrade1]: https://github.com/datastax/nodejs-driver/blob/master/doc/upgrade-guide-2.0.md\n[old-driver]: https://github.com/jorgebay/node-cassandra-cql\n[jorgebay]: https://github.com/jorgebay\n[drivers]: https://github.com/datastax\n[mailinglist]: https://groups.google.com/a/lists.datastax.com/forum/#!forum/nodejs-driver-user\n[jira]: https://datastax-oss.atlassian.net/projects/NODEJS/issues\n[streams2]: http://nodejs.org/api/stream.html#stream_class_stream_readable\n[cql-udt]: http://cassandra.apache.org/doc/cql3/CQL.html#createTypeStmt\n[survey]: http://goo.gl/forms/f216tY3Ebr",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/datastax/nodejs-driver.git"
  },
  "scripts": {
    "ci": "mocha test/unit test/integration/short -R mocha-jenkins-reporter",
    "test": "mocha test/unit -R spec -t 5000"
  },
  "version": "3.0.0"
}
