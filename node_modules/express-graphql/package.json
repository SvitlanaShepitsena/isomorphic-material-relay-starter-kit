{
  "_args": [
    [
      "express-graphql@https://registry.npmjs.org/express-graphql/-/express-graphql-0.4.5.tgz",
      "C:\\app\\isomorphic-material-relay-starter-kit"
    ]
  ],
  "_from": "express-graphql@>=0.4.0 <0.5.0",
  "_id": "express-graphql@0.4.5",
  "_inCache": true,
  "_location": "/express-graphql",
  "_phantomChildren": {},
  "_requested": {
    "name": "express-graphql",
    "raw": "express-graphql@https://registry.npmjs.org/express-graphql/-/express-graphql-0.4.5.tgz",
    "rawSpec": "https://registry.npmjs.org/express-graphql/-/express-graphql-0.4.5.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/express-graphql/-/express-graphql-0.4.5.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/express-graphql/-/express-graphql-0.4.5.tgz",
  "_shasum": "8d124ad6a881c38397aba34bfbd0fa154051e2b1",
  "_shrinkwrap": null,
  "_spec": "express-graphql@https://registry.npmjs.org/express-graphql/-/express-graphql-0.4.5.tgz",
  "_where": "C:\\app\\isomorphic-material-relay-starter-kit",
  "bugs": {
    "url": "https://github.com/graphql/express-graphql/issues"
  },
  "contributors": [
    {
      "email": "lee@leebyron.com",
      "name": "Lee Byron",
      "url": "http://leebyron.com/"
    },
    {
      "email": "dschafer@fb.com",
      "name": "Daniel Schafer"
    }
  ],
  "dependencies": {
    "content-type": "~1.0.1",
    "http-errors": "~1.3.1",
    "raw-body": "~2.1.2"
  },
  "description": "Create a GraphQL HTTP server with Express.",
  "devDependencies": {
    "babel": "5.8.21",
    "babel-core": "5.8.22",
    "babel-eslint": "4.0.10",
    "babel-runtime": "5.8.20",
    "body-parser": "^1.14.0",
    "chai": "3.2.0",
    "coveralls": "2.11.4",
    "eslint": "1.1.0",
    "eslint-plugin-babel": "2.1.1",
    "express": "4.13.3",
    "express3": "*",
    "flow-bin": "0.18.1",
    "graphql": "0.4.8",
    "isparta": "3.0.3",
    "mocha": "2.2.5",
    "multer": "1.0.3",
    "sane": "1.1.3",
    "supertest": "1.0.1",
    "supertest-as-promised": "2.0.2"
  },
  "directories": {
    "lib": "./dist"
  },
  "files": [
    "dist",
    "README.md",
    "LICENSE",
    "PATENTS"
  ],
  "homepage": "https://github.com/graphql/express-graphql#readme",
  "keywords": [
    "express",
    "graphql",
    "middleware",
    "api"
  ],
  "license": "BSD-3-Clause",
  "main": "dist/index.js",
  "name": "express-graphql",
  "optionalDependencies": {},
  "options": {
    "mocha": "--require resources/mocha-bootload src/**/__tests__/**/*.js"
  },
  "peerDependencies": {
    "graphql": "^0.4.8"
  },
  "readme": "GraphQL Express Middleware\n==========================\n\n[![Build Status](https://travis-ci.org/graphql/express-graphql.svg)](https://travis-ci.org/graphql/express-graphql)\n[![Coverage Status](https://coveralls.io/repos/graphql/express-graphql/badge.svg?branch=master&service=github)](https://coveralls.io/github/graphql/express-graphql?branch=master)\n\nCreate a GraphQL HTTP server with [Express](http://expressjs.com).\n\n```sh\nnpm install --save express-graphql\n```\n\nInstall express-graphql as middleware in your express server:\n\n```js\nvar graphqlHTTP = require('express-graphql');\n\nvar app = express();\n\napp.use('/graphql', graphqlHTTP({ schema: MyGraphQLSchema, graphiql: true }));\n```\n\n\n### Options\n\nThe `graphqlHTTP` function accepts the following options:\n\n  * **`schema`**: A `GraphQLSchema` instance from [`graphql-js`][].\n    A `schema` *must* be provided.\n\n  * **`rootValue`**: A value to pass as the rootValue to the `graphql()`\n    function from [`graphql-js`][].\n\n  * **`pretty`**: If `true`, any JSON response will be pretty-printed.\n\n  * **`graphiql`**: If `true`, may present [GraphiQL][] when loaded directly\n    from a browser (a useful tool for debugging and exploration).\n\n\n### HTTP Usage\n\nOnce installed at a path, `express-graphql` will accept requests with\nthe parameters:\n\n  * **`query`**: A string GraphQL document to be executed.\n\n  * **`variables`**: The runtime values to use for any GraphQL query variables\n    as a JSON object.\n\n  * **`operationName`**: If the provided `query` contains multiple named\n    operations, this specifies which operation should be executed. If not\n    provided, a 400 error will be returned if the `query` contains multiple\n    named operations.\n\n  * **`raw`**: If the `graphiql` option is enabled and the `raw` parameter is\n    provided raw JSON will always be returned instead of GraphiQL even when\n    loaded from a browser.\n\nGraphQL will first look for each parameter in the URL's query-string:\n\n```\n/graphql?query=query+getUser($id:ID){user(id:$id){name}}&variables={\"id\":\"4\"}\n```\n\nIf not found in the query-string, it will look in the POST request body.\n\nIf a previous middleware has already parsed the POST body, the `request.body`\nvalue will be used. Use [`multer`][] or a similar middleware to add support\nfor `multipart/form-data` content, which may be useful for GraphQL mutations\ninvolving uploading files. See an [example using multer](https://github.com/graphql/express-graphql/blob/master/src/__tests__/http-test.js#L603).\n\nIf the POST body has not yet been parsed, graphql-express will interpret it\ndepending on the provided *Content-Type* header.\n\n  * **`application/json`**: the POST body will be parsed as a JSON\n    object of parameters.\n\n  * **`application/x-www-form-urlencoded`**: this POST body will be\n    parsed as a url-encoded string of key-value pairs.\n\n  * **`application/graphql`**: The POST body will be parsed as GraphQL\n    query string, which provides the `query` parameter.\n\n\n### Advanced Options\n\nIn order to support advanced scenarios such as installing a GraphQL server on a\ndynamic endpoint or accessing the current authentication information,\nexpress-graphql allows options to be provided as a function of each\nexpress request.\n\nThis example uses [`express-session`][] to run GraphQL on a rootValue based on\nthe currently logged-in session.\n\n```js\nvar session = require('express-session');\nvar graphqlHTTP = require('express-graphql');\n\nvar app = express();\n\napp.use(session({ secret: 'keyboard cat', cookie: { maxAge: 60000 }}));\n\napp.use('/graphql', graphqlHTTP(request => ({\n  schema: MySessionAwareGraphQLSchema,\n  rootValue: { session: request.session },\n  graphiql: true\n})));\n```\n\nThen in your type definitions, access `session` from the rootValue:\n\n```js\nnew GraphQLObjectType({\n  name: 'MyType',\n  fields: {\n    myField: {\n      type: GraphQLString,\n      resolve(parentValue, _, { rootValue: { session } }) {\n        // use `session` here\n      }\n    }\n  }\n});\n```\n\n[`graphql-js`]: https://github.com/graphql/graphql-js\n[GraphiQL]: https://github.com/graphql/graphiql\n[`multer`]: https://github.com/expressjs/multer\n[`express-session`]: https://github.com/expressjs/session\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/graphql/express-graphql.git"
  },
  "scripts": {
    "build": "rm -rf dist/* && babel src --ignore __tests__ --out-dir dist",
    "check": "flow check",
    "cover": "babel-node node_modules/.bin/isparta cover --root src --report html node_modules/.bin/_mocha -- $npm_package_options_mocha",
    "cover:lcov": "babel-node node_modules/.bin/isparta cover --root src --report lcovonly node_modules/.bin/_mocha -- $npm_package_options_mocha",
    "lint": "eslint src",
    "prepublish": ". ./resources/prepublish.sh",
    "preversion": "npm test",
    "test": "npm run lint && npm run check && npm run testonly",
    "testonly": "mocha $npm_package_options_mocha",
    "watch": "babel --optional runtime resources/watch.js | node"
  },
  "version": "0.4.5"
}
