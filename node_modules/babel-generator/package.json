{
  "_args": [
    [
      "babel-generator@https://registry.npmjs.org/babel-generator/-/babel-generator-6.4.5.tgz",
      "C:\\App\\isomorphic-material-relay-starter-kit"
    ]
  ],
  "_from": "babel-generator@>=6.4.5 <7.0.0",
  "_id": "babel-generator@6.4.5",
  "_inCache": true,
  "_location": "/babel-generator",
  "_phantomChildren": {
    "core-js": "1.2.6"
  },
  "_requested": {
    "name": "babel-generator",
    "raw": "babel-generator@https://registry.npmjs.org/babel-generator/-/babel-generator-6.4.5.tgz",
    "rawSpec": "https://registry.npmjs.org/babel-generator/-/babel-generator-6.4.5.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/babel-generator/-/babel-generator-6.4.5.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/babel-core"
  ],
  "_resolved": "https://registry.npmjs.org/babel-generator/-/babel-generator-6.4.5.tgz",
  "_shasum": "55b9fc48b6e6232eea36d75adfd33eaacbc03e44",
  "_shrinkwrap": null,
  "_spec": "babel-generator@https://registry.npmjs.org/babel-generator/-/babel-generator-6.4.5.tgz",
  "_where": "C:\\App\\isomorphic-material-relay-starter-kit",
  "author": {
    "email": "sebmck@gmail.com",
    "name": "Sebastian McKenzie"
  },
  "dependencies": {
    "babel-messages": "^6.3.18",
    "babel-runtime": "^5.0.0",
    "babel-types": "^6.4.5",
    "detect-indent": "^3.0.1",
    "is-integer": "^1.0.4",
    "lodash": "^3.10.1",
    "repeating": "^1.1.3",
    "source-map": "^0.5.0",
    "trim-right": "^1.0.1"
  },
  "description": "Turns an AST into code.",
  "devDependencies": {
    "babel-helper-fixtures": "^6.3.13",
    "babylon": "^6.4.5"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://babeljs.io/",
  "license": "MIT",
  "main": "lib/index.js",
  "name": "babel-generator",
  "optionalDependencies": {},
  "readme": "# babel-generator\n\n> Turns an AST into code.\n\n## Install\n\n```sh\n$ npm install babel-generator\n```\n\n## Usage\n\n```js\nimport {parse} from 'babylon';\nimport generate from 'babel-generator';\n\nconst code = 'class Example {}';\nconst ast = parse(code);\n\nconst output = generate(ast, { /* options */ }, code);\n```\n\n## Options\n\nOptions for formatting output:\n\nname                   | type     | default         | description\n-----------------------|----------|-----------------|--------------------------------------------------------------------------\nauxiliaryCommentBefore | string   |                 | Optional string to add as a block comment at the start of the output file\nauxiliaryCommentAfter  | string   |                 | Optional string to add as a block comment at the end of the output file\nshouldPrintComment     | function | `opts.comments` | Function that takes a comment (as a string) and returns `true` if the comment should be included in the output.  By default, comments are included if `opts.comments` is `true` or if `opts.minifed` is `false` and the comment contains `@preserve` or `@license`\nretainLines            | boolean  | `false`         | Attempt to use the same line numbers in the output code as in the source code (helps preserve stack traces)\ncomments               | boolean  | `true`          | Should comments be included in output\ncompact                | boolean or `'auto'` | `opts.minified` | Set to `true` to avoid adding whitespace for formatting\nminified               | boolean  | `false`         | Should the output be minified\nconcise                | boolean  | `false`         | Set to `true` to reduce whitespace (but not as much as `opts.compact`)\nquotes                 | `'single'` or `'double'` | autodetect based on `ast.tokens` | The type of quote to use in the output\nfilename               | string   |                 | Used in warning messages\n\nOptions for source maps:\n\nname                   | type     | default         | description\n-----------------------|----------|-----------------|--------------------------------------------------------------------------\nsourceMaps             | boolean  | `false`         | Enable generating source maps\nsourceMapTarget        | string   |                 | The filename of the generated code that the source map will be associated with\nsourceRoot             | string   |                 | A root for all relative URLs in the source map\nsourceFileName         | string   |                 | The filename for the source code (i.e. the code in the `code` argument)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/babel/babel/tree/master/packages/babel-generator"
  },
  "version": "6.4.5"
}
