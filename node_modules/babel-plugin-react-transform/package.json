{
  "_args": [
    [
      "babel-plugin-react-transform@https://registry.npmjs.org/babel-plugin-react-transform/-/babel-plugin-react-transform-1.1.1.tgz",
      "C:\\App\\isomorphic-material-relay-starter-kit"
    ]
  ],
  "_from": "babel-plugin-react-transform@>=1.1.1 <2.0.0",
  "_id": "babel-plugin-react-transform@1.1.1",
  "_inCache": true,
  "_location": "/babel-plugin-react-transform",
  "_phantomChildren": {},
  "_requested": {
    "name": "babel-plugin-react-transform",
    "raw": "babel-plugin-react-transform@https://registry.npmjs.org/babel-plugin-react-transform/-/babel-plugin-react-transform-1.1.1.tgz",
    "rawSpec": "https://registry.npmjs.org/babel-plugin-react-transform/-/babel-plugin-react-transform-1.1.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/babel-plugin-react-transform/-/babel-plugin-react-transform-1.1.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/babel-plugin-react-transform/-/babel-plugin-react-transform-1.1.1.tgz",
  "_shasum": "95e243827a1090bb8b6e93fe7c6f56fb5c23b0fb",
  "_shrinkwrap": null,
  "_spec": "babel-plugin-react-transform@https://registry.npmjs.org/babel-plugin-react-transform/-/babel-plugin-react-transform-1.1.1.tgz",
  "_where": "C:\\App\\isomorphic-material-relay-starter-kit",
  "author": {
    "email": "dan.abramov@me.com",
    "name": "Dan Abramov"
  },
  "bugs": {
    "url": "https://github.com/gaearon/babel-plugin-react-transform/issues"
  },
  "dependencies": {
    "path-parse": "^1.0.5"
  },
  "description": "Babel plugin to instrument React components with custom transforms",
  "devDependencies": {
    "babel": "^5.8.23",
    "mocha": "^2.2.5",
    "rimraf": "^2.4.3"
  },
  "homepage": "https://github.com/gaearon/babel-plugin-react-transform#readme",
  "keywords": [
    "babel-plugin",
    "react-transform",
    "instrumentation",
    "dx",
    "react",
    "reactjs",
    "components"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "babel-plugin-react-transform",
  "optionalDependencies": {},
  "readme": "# babel-plugin-react-transform\n\nThis Babel plugin wraps all React components into arbitrary transforms written by the community.  \nIn other words, **it lets you instrument React components** in any custom way.\n\nSuch transforms can do a variety of things:\n\n* catch errors inside `render()` like **[react-transform-catch-errors](https://github.com/gaearon/react-transform-catch-errors)**;\n* enable hot reloading like **[react-transform-hmr](https://github.com/gaearon/react-transform-hmr)**;\n* render an inline prop inspector like **[react-transform-debug-inspector](https://github.com/alexkuz/react-transform-debug-inspector)**;\n* highlight parts of the screen when components update like\n**[react-transform-render-visualizer](https://github.com/spredfast/react-transform-render-visualizer)**;\n* etc.\n\nThe limit is your imagination and the time you feel compelled to spend on writing these transforms.  \nTime will show whether it is an amazing, or a terrible idea.\n\n[![react-transform channel on slack](https://img.shields.io/badge/slack-react--transform%40reactiflux-61DAFB.svg?style=flat-square)](http://www.reactiflux.com)\n\n## Demo\n\nCheck out **[react-transform-boilerplate](https://github.com/gaearon/react-transform-boilerplate)** for a demo showing a combination of transforms.\n\n![](http://i.imgur.com/AhGY28T.gif)\n\n## Installation\n\nFirst, install the plugin:\n\n```\nnpm install --save-dev babel-plugin-react-transform\n```\n\nThen, install the transforms you’re interested in:\n\n```\nnpm install --save-dev react-transform-hmr\nnpm install --save-dev react-transform-catch-errors\n```\n\nThen edit your `.babelrc` to include `extra.react-transform`.  \nIt must be an object with a `transforms` property being an array of the transforms you want to use:\n\n```js\n{\n  \"stage\": 0,\n  \"env\": {\n    // this plugin will be included only in development mode, e.g.\n    // if NODE_ENV (or BABEL_ENV) environment variable is not set\n    // or is equal to \"development\"\n    \"development\": {\n      \"plugins\": [\n        // Include babel-plugin-react-display-name if you’re\n        // using React.createClass() *before* react-transform:\n        // \"react-display-name\",\n        \"react-transform\"\n      ],\n      \"extra\": {\n        // must be an object\n        \"react-transform\": {\n          // must be an array\n          \"transforms\": [{\n            // can be an NPM module name or a local path\n            \"transform\": \"react-transform-hmr\",\n            // see specific transform's docs for \"imports\" and \"locals\" it needs\n            \"imports\": [\"react\"],\n            \"locals\": [\"module\"]\n          }, {\n            // you can have many transforms, not just one\n            \"transform\": \"react-transform-catch-errors\",\n            \"imports\": [\"react\", \"redbox-react\"]\n          }, {\n            // can be an NPM module name or a local path\n            \"transform\": \"./src/my-custom-transform\"\n          }]\n        },\n        // by default we only look for `React.createClass` (and ES6 classes)\n        // but you can tell the plugin to look for different component factories:\n        // factoryMethods: [\"React.createClass\", \"createClass\"]\n      }\n    }\n  }\n}\n```\n\nAs you can see each transform, apart from the `transform` field where you write it name, also has `imports` and `locals` fields. You should consult the docs of each individual transform to learn which `imports` and `locals` it might need, and how it uses them. You probably already guessed that this is just a way to inject local variables (like `module`) or dependencies (like `react`) into the transforms that need them.\n\nNote that when using `React.createClass()` and allowing `babel` to extract the `displayName` property you must ensure that [babel-plugin-react-display-name](https://github.com/babel/babel/tree/development/packages/babel-plugin-react-display-name) is included before `react-transform`. See [this github issue](https://github.com/gaearon/babel-plugin-react-transform/issues/19) for more details.\n\nYou may optionally specify an array of strings called `factoryMethods` if you want the plugin to look for components created with a factory method other than `React.createClass`. Note that you don’t have to do anything special to look for ES6 components—`factoryMethods` is only relevant if you use factory methods akin to `React.createClass`.\n\n## Writing a Transform\n\nIt’s not hard to write a custom transform! First, make sure you call your NPM package `react-transform-*` so we have uniform naming across the transforms. The only thing you should export from your transform module is a function.\n\n```js\nexport default function myTransform() {\n  // ¯\\_(ツ)_/¯\n}\n```\n\nThis function should *return another function*:\n\n```js\nexport default function myTransform() {\n  return function wrap(ReactClass) {\n    // ¯\\_(ツ)_/¯\n    return ReactClass;\n  }\n}\n```\n\nAs you can see, you’ll receive `ReactClass` as a parameter. It’s up to you to do something with it: monkeypatch its methods, create another component with the same prototype and a few different methods, wrap it into a higher-order component, etc. Be creative!\n\n```js\nexport default function logAllUpdates() {\n  return function wrap(ReactClass) {\n    const displayName = // ¯\\_(ツ)_/¯\n    const originalComponentDidUpdate = ReactClass.prototype.componentDidUpdate;\n\n    ReactClass.prototype.componentDidUpdate = function componentDidUpdate() {\n      console.info(`${displayName} updated:`, this.props, this.state);\n\n      if (originalComponentDidUpdate) {\n        originalComponentDidUpdate.apply(this, arguments);\n      }\n    }\n\n    return ReactClass;\n  }\n}\n```\n\nOh, how do I get `displayName`?  \nActually, we give your transformation function a single argument called `options`. Yes, `options`:\n\n```js\nexport default function logAllUpdates(options) {\n```\n\nIt contains some useful data. For example, your `options` could look like this:\n\n```js\n{\n  // the file being processed\n  filename: '/Users/dan/p/my-projects/src/App.js',\n  // remember that \"imports\" .babelrc option?\n  imports: [React],\n  // remember that \"locals\" .babelrc option?\n  locals: [module],\n  // all components declared in the current file\n  components: {\n    $_MyComponent: {\n      // with their displayName when available\n      displayName: 'MyComponent'\n    },\n    $_SomeOtherComponent: {\n      displayName: 'SomeOtherComponent',\n      // and telling whether they are defined inside a function\n      isInFunction: true\n    }\n  }\n}\n```\n\nOf course, you might not want to use *all* options, but isn’t it nice to know that you have access to them in the top scope—which means before the component definitions actually run? (Hint: a hot reloading plugin might use this to decide whether a module is worthy of reloading, even if it contains an error and no React components have yet been wrapped because of it.)\n\nSo, to retrieve the `displayName` (or `isInFunction`, when available), use the `options` parameter *and* the second `uniqueId` parameter given to the inner function after `ReactClass`:\n\n```js\nexport default function logAllUpdates(options) {\n  return function wrap(ReactClass, uniqueId) {\n    const displayName = options.components[uniqueId].displayName || '<Unknown>';\n```\n\nThis is it!\n\nSure, it’s a slightly contrived example, as you can grab `ReactClass.displayName` just fine, but it illustrates a point: you have information about all of the components inside a file before that file executes, which is *very* handy for some transformations.\n\nHere is the complete code for this example transformation function:\n\n```js\nexport default function logAllUpdates(options) {\n  return function wrap(ReactClass, uniqueId) {\n    const displayName = options.components[uniqueId].displayName || '<Unknown>';\n    const originalComponentDidUpdate = ReactClass.prototype.componentDidUpdate;\n\n    ReactClass.prototype.componentDidUpdate = function componentDidUpdate() {\n      console.info(`${displayName} updated:`, this.props, this.state);\n\n      if (originalComponentDidUpdate) {\n        originalComponentDidUpdate.apply(this, arguments);\n      }\n    }\n\n    return ReactClass;\n  }\n}\n```\n\nNow go ahead and write your own!  \nDon’t forget to tag it with `react-transform` keyword on npm.\n\n## Ecosystem\n\n* **https://github.com/gaearon/react-transform-boilerplate**\n* **https://github.com/gaearon/react-transform-hmr**\n* **https://github.com/gaearon/react-transform-catch-errors**\n* **https://github.com/alexkuz/react-transform-debug-inspector**\n* Feeling inspired? Send a PR!\n\n## Discussion\n\nYou can discuss React Transform and related projects in **#react-transform** channel on [Reactiflux Slack](http://reactiflux.com).\n\n## Patrons\n\nThe work on React Transform, [React Hot Loader](https://github.com/gaearon/react-hot-loader), [Redux](https://github.com/rackt/redux), and related projects was [funded by the community](https://www.patreon.com/reactdx). Meet some of the outstanding companies that made it possible:\n\n* [Webflow](http://webflow.com/)\n* [Chess iX](http://www.chess-ix.com/)\n\n[See the full list of React Transform patrons.](PATRONS.md)\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gaearon/babel-plugin-react-transform.git"
  },
  "scripts": {
    "build": "babel-plugin build",
    "clean": "rimraf lib",
    "prepublish": "npm run clean && npm run build",
    "test": "mocha --compilers js:babel/register",
    "test:watch": "npm run test -- --watch"
  },
  "version": "1.1.1"
}
