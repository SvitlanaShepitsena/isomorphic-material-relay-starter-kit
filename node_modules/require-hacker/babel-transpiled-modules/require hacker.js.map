{"version":3,"sources":["../source/require hacker.js"],"names":[],"mappings":"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","file":"require hacker.js","sourcesContent":["// Hacking too much time\r\n\r\n// Based on Node.js Module class sources:\r\n// https://github.com/nodejs/node/blob/master/lib/module.js\r\n\r\nimport fs     from 'fs'\r\nimport path   from 'path'\r\nimport Module from 'module'\r\n\r\nimport Log from './tools/log'\r\nimport { exists, starts_with, ends_with } from './helpers'\r\n\r\nimport serialize from './tools/serialize-javascript'\r\n\r\nconst require_hacker = \r\n{\r\n\tpreceding_path_resolvers: [],\r\n\tpath_resolvers: [],\r\n\r\n\tglobal_hook_resolved_modules: {},\r\n\r\n\tglobal_hooks_enabled: true,\r\n\r\n\toccupied_file_extensions: new Set(),\r\n\r\n\t// logging\r\n\tlog: new Log('require-hook', { debug: false }), // this.options.debug\r\n\r\n\t// installs a require() path resolver \r\n\t//\r\n\t// resolve - a function which takes two parameters:\r\n\t//\r\n\t//             the path to be resolved\r\n\t//             the module in which the require() call was originated\r\n\t//\r\n\t//           must return either a new path to the require()d module\r\n\t//           or it can return nothing to fall back to the original require()d module path\r\n\t//\r\n\t// returns an object with an .unmount() method\r\n\t//\r\n\tresolver(resolve)\r\n\t{\r\n\t\tvalidate.resolve(resolve)\r\n\r\n\t\tconst resolver = (path, module) =>\r\n\t\t{\r\n\t\t\t// resolve the path for this require() call\r\n\t\t\tconst resolved_path = resolve(path, module)\r\n\t\t\t\r\n\t\t\t// if no path was resolved - do nothing\r\n\t\t\tif (!exists(resolved_path))\r\n\t\t\t{\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\t// return the path to be require()d \r\n\t\t\treturn resolved_path\r\n\t\t}\r\n\r\n\t\trequire_hacker.preceding_path_resolvers.push(resolver)\r\n\r\n\t\tconst result =\r\n\t\t{\r\n\t\t\tunmount: () =>\r\n\t\t\t{\r\n\t\t\t\t// javascript arrays still have no .remove() method in the XXI-st century\r\n\t\t\t\trequire_hacker.preceding_path_resolvers = require_hacker.preceding_path_resolvers.filter(x => x !== resolver)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result\r\n\t},\r\n\r\n\t// installs a global require() hook for all paths \r\n\t//\r\n\t// (if these paths are certain to exist in the filesystem\r\n\t//  and if you need only a specific file extension\r\n\t//  then use the .hook(extension, resolve) method instead)\r\n\t//\r\n\t// id - a meaningful textual identifier\r\n\t//\r\n\t// resolve - a function which takes two parameters:\r\n\t//\r\n\t//             the path to be resolved\r\n\t//             the module in which the require() call was originated\r\n\t//\r\n\t//           must return either a javascript CommonJS module source code\r\n\t//           (i.e. \"module.exports = ...\", etc)\r\n\t//           or it can return nothing to fall back to the original Node.js loader\r\n\t//\r\n\t// returns an object with an .unmount() method\r\n\t//\r\n\t// options:\r\n\t//\r\n\t//   precede_node_loader:\r\n\t//     \r\n\t//     true  - this require() hook will intercept all require() calls\r\n\t//             before they go into the original Node.js loader\r\n\t//    \r\n\t//     false - this require() hook will only intercept those require() calls\r\n\t//             which failed to be resolved by the original Node.js loader\r\n\t//\r\n\t//     default value: true\r\n\t//\r\n\tglobal_hook(id, resolve, options = {})\r\n\t{\r\n\t\tvalidate.global_hook(id, resolve)\r\n\r\n\t\tconst resolver = (path, module) =>\r\n\t\t{\r\n\t\t\t// get CommonJS module source code for this require() call\r\n\t\t\tconst source = resolve(path, module)\r\n\t\t\t\r\n\t\t\t// if no CommonJS module source code returned - skip this require() hook\r\n\t\t\tif (!exists(source))\r\n\t\t\t{\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// CommonJS module source code returned, \r\n\t\t\t// so put it into a hash for a corresponding key\r\n\r\n\t\t\tconst resolved_path = `${path}.${id}`\r\n\t\t\t\r\n\t\t\t// flush require() cache\r\n\t\t\tdelete require.cache[resolved_path]\r\n\r\n\t\t\t// put the CommonJS module source code into the hash\r\n\t\t\trequire_hacker.global_hook_resolved_modules[resolved_path] = source\r\n\r\n\t\t\t// return the path to be require()d \r\n\t\t\t// in order to get the CommonJS module source code\r\n\t\t\treturn resolved_path\r\n\t\t}\r\n\r\n\t\tif (options.precede_node_loader === false)\r\n\t\t{\r\n\t\t\trequire_hacker.path_resolvers.push(resolver)\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trequire_hacker.preceding_path_resolvers.push(resolver)\r\n\t\t}\r\n\r\n\t\tconst hook = this.hook(id, path => \r\n\t\t{\r\n\t\t\tconst source = require_hacker.global_hook_resolved_modules[path]\r\n\t\t\tdelete require_hacker.global_hook_resolved_modules[path]\r\n\t\t\treturn source\r\n\t\t})\r\n\r\n\t\tconst result =\r\n\t\t{\r\n\t\t\tunmount: () =>\r\n\t\t\t{\r\n\t\t\t\t// javascript arrays still have no .remove() method in the XXI-st century\r\n\t\t\t\trequire_hacker.preceding_path_resolvers = require_hacker.preceding_path_resolvers.filter(x => x !== resolver)\r\n\t\t\t\trequire_hacker.path_resolvers = require_hacker.path_resolvers.filter(x => x !== resolver)\r\n\t\t\t\thook.unmount()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result\r\n\t},\r\n\r\n\t// installs a require() hook for the extension\r\n\t//\r\n\t// extension - a file extension to hook into require()s of\r\n\t//             (examples: 'css', 'jpg', 'js')\r\n\t//\r\n\t// resolve   - a function that takes two parameters: \r\n\t//\r\n\t//               the path requested in the require() call \r\n\t//               the module in which the require() call was originated\r\n\t//\r\n\t//             must return either a javascript CommonJS module source code\r\n\t//             (i.e. \"module.exports = ...\", etc)\r\n\t//             or it can return nothing to fall back to the original Node.js loader\r\n\t//\r\n\thook(extension, resolve)\r\n\t{\r\n\t\tthis.log.debug(`Hooking into *.${extension} files loading`)\r\n\t\t\r\n\t\t// validation\r\n\t\tvalidate.extension(extension)\r\n\t\tvalidate.resolve(resolve)\r\n\r\n\t\t// occupy file extension\r\n\t\tthis.occupied_file_extensions.add(extension)\r\n\r\n\t\t// dotted extension\r\n\t\tconst dot_extension = `.${extension}`\r\n\r\n\t\t// keep original extension loader\r\n\t\tconst original_loader = Module._extensions[dot_extension]\r\n\r\n\t\t// display a warning in case of extension loader override\r\n\t\tif (original_loader)\r\n\t\t{\r\n\t\t\t// output a debug message in case of extension loader override,\r\n\t\t\t// not a warning, so that it doesn't scare people\r\n\t\t\tthis.log.debug(`-----------------------------------------------`)\r\n\t\t\tthis.log.debug(`Overriding an already existing require() hook `)\r\n\t\t\tthis.log.debug(`for file extension ${dot_extension}`)\r\n\t\t\tthis.log.debug(`-----------------------------------------------`)\r\n\t\t}\r\n\r\n\t\t// the list of cached modules\r\n\t\tconst cached_modules = new Set()\r\n\r\n\t\t// Node.js inner API check\r\n\t\t/* istanbul ignore if */\r\n\t\tif (!Module._extensions)\r\n\t\t{\r\n\t\t\tthrow new Error('Incompatilbe Node.js version detected: \"Module._extensions\" array is missing. File an issue on GitHub.')\r\n\t\t}\r\n\r\n\t\t// set new loader for this extension\r\n\t\tModule._extensions[dot_extension] = (module, filename) =>\r\n\t\t{\r\n\t\t\tthis.log.debug(`require() hook fired for ${filename}`)\r\n\r\n\t\t\t// var source = fs.readFileSync(filename, 'utf8')\r\n\t\t\tconst source = resolve(filename, module)\r\n\r\n\t\t\tif (!exists(source))\r\n\t\t\t{\r\n\t\t\t\tthis.log.debug(`Fallback to original loader`)\r\n\r\n\t\t\t\t// this message would appear if there was no loader \r\n\t\t\t\t// for the extension of the filename\r\n\t\t\t\tif (path.extname(filename) !== dot_extension)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.log.info(`Trying to load \"${path.basename(filename)}\" as a \"*${dot_extension}\"`)\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// load the file with the original loader\r\n\t\t\t\treturn (original_loader || Module._extensions['.js'])(module, filename)\r\n\t\t\t}\r\n\r\n\t\t\t// add this file path to the list of cached modules\r\n\t\t\tcached_modules.add(filename)\r\n\r\n\t\t\t// Node.js inner API check\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (!module._compile)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('Incompatilbe Node.js version detected: \"Module.prototype._compile\" function is missing. File an issue on GitHub.')\r\n\t\t\t}\r\n\r\n\t\t\t// compile javascript module from its source\r\n\t\t\t// https://github.com/nodejs/node/blob/master/lib/module.js#L379\r\n\t\t\tmodule._compile(source, filename)\r\n\t\t}\r\n\r\n\t\tconst result = \r\n\t\t{\r\n\t\t\t// uninstall the hook\r\n\t\t\tunmount: () =>\r\n\t\t\t{\r\n\t\t\t\t// clear require() cache for this file extension\r\n\t\t\t\tfor (let path of cached_modules)\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete require.cache[path]\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// mount the original loader for this file extension\r\n\t\t\t\tModule._extensions[dot_extension] = original_loader\r\n\r\n\t\t\t\t// free file extension\r\n\t\t\t\tthis.occupied_file_extensions.delete(extension)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result\r\n\t},\r\n\r\n\t// returns a CommonJS modules source.\r\n\tto_javascript_module_source(anything)\r\n\t{\r\n\t\t// if the asset source wasn't found - return an empty CommonJS module\r\n\t\tif (!exists(anything))\r\n\t\t{\r\n\t\t\treturn 'module.exports = undefined'\r\n\t\t}\r\n\r\n\t\t// if it's already a common js module source\r\n\t\tif (typeof anything === 'string' && is_a_module_declaration(anything))\r\n\t\t{\r\n\t\t\treturn anything\r\n\t\t}\r\n\r\n\t\t// generate javascript module source code based on the `source` variable\r\n\t\treturn 'module.exports = ' + serialize(anything)\r\n\t},\r\n\r\n\t// resolves a requireable `path` to a real filesystem path relative to the `module`\r\n\t// (resolves `npm link`, etc)\r\n\tresolve(path_to_resolve, module)\r\n\t{\r\n\t\t// Module._resolveFilename existence check is perfomed outside of this method\r\n\t\ttry\r\n\t\t{\r\n\t\t\trequire_hacker.global_hooks_enabled = false\r\n\t\t\treturn original_resolveFilename(path_to_resolve, module)\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\trequire_hacker.global_hooks_enabled = true\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// validation\r\nconst validate =\r\n{\r\n\textension(extension)\r\n\t{\r\n\t\t// if (typeof extension !== 'string')\r\n\t\t// {\r\n\t\t// \tthrow new Error(`Expected string extension. Got ${extension}`)\r\n\t\t// }\r\n\r\n\t\tif (path.extname(`test.${extension}`) !== `.${extension}`)\r\n\t\t{\r\n\t\t\tthrow new Error(`Invalid file extension \"${extension}\"`)\r\n\t\t}\r\n\r\n\t\t// check if the file extension is already occupied\r\n\t\tif (require_hacker.occupied_file_extensions.has(extension))\r\n\t\t{\r\n\t\t\tthrow new Error(`File extension \"${extension}\" is already occupied by require-hacker`)\r\n\t\t}\r\n\t},\r\n\r\n\tresolve(resolve)\r\n\t{\r\n\t\tif (typeof resolve !== 'function')\r\n\t\t{\r\n\t\t\tthrow new Error(`Resolve should be a function. Got \"${resolve}\"`)\r\n\t\t}\r\n\t},\r\n\r\n\tglobal_hook(id, resolver)\r\n\t{\r\n\t\tif (!id)\r\n\t\t{\r\n\t\t\tthrow new Error(`You must specify global hook id`)\r\n\t\t}\r\n\r\n\t\tif (path.extname(`test.${id}`) !== `.${id}`)\r\n\t\t{\r\n\t\t\tthrow new Error(`Invalid global hook id \"${id}\". Expected a valid file extension.`)\r\n\t\t}\r\n\r\n\t\t// check if the file extension is already occupied\r\n\t\tif (require_hacker.occupied_file_extensions.has(id))\r\n\t\t{\r\n\t\t\tthrow new Error(`File extension \"${id}\" is already occupied by require-hacker`)\r\n\t\t}\r\n\r\n\t\tvalidate.resolve(resolver)\r\n\t}\r\n}\r\n\r\n// Node.js inner API check\r\n/* istanbul ignore if */\r\nif (!Module._resolveFilename)\r\n{\r\n\tthrow new Error('Incompatilbe Node.js version detected: \"Module._resolveFilename\" function is missing. File an issue on GitHub.')\r\n}\r\n\r\n// Node.js inner API check\r\n/* istanbul ignore if */\r\nif (!Module._findPath)\r\n{\r\n\tthrow new Error('Incompatilbe Node.js version detected: \"Module._findPath\" function is missing. File an issue on GitHub.')\r\n}\r\n\r\n// the module in which the require() call originated\r\nlet require_caller\r\n\r\n// instrument Module._resolveFilename\r\n// https://github.com/nodejs/node/blob/master/lib/module.js#L322\r\n//\r\n// `arguments` would conflict with Babel, therefore `...parameters`\r\n//\r\n// const native_module = require('native_module')\r\nconst original_resolveFilename = Module._resolveFilename\r\nModule._resolveFilename = function(...parameters)\r\n{\r\n\tconst request = parameters[0]\r\n\tconst parent = parameters[1]\r\n\r\n\t// take note of the require() caller\r\n\trequire_caller = parent\r\n\r\n\treturn original_resolveFilename.apply(this, parameters)\r\n}\r\n\r\n// instrument Module._findPath\r\n// https://github.com/nodejs/node/blob/master/lib/module.js#L335-L341\r\n//\r\n// `arguments` would conflict with Babel, therefore `...parameters`\r\n//\r\nconst original_findPath = Module._findPath\r\nModule._findPath = (...parameters) =>\r\n{\r\n\tconst request = parameters[0]\r\n\t// const paths = parameters[1]\r\n\r\n\t// preceeding resolvers\r\n\tif (require_hacker.global_hooks_enabled)\r\n\t{\r\n\t\tfor (let resolver of require_hacker.preceding_path_resolvers)\r\n\t\t{\r\n\t\t\tconst resolved_path = resolver(request, require_caller)\r\n\t\t\tif (exists(resolved_path))\r\n\t\t\t{\r\n\t\t\t\treturn resolved_path\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// original Node.js loader\r\n\tconst filename = original_findPath.apply(undefined, parameters)\r\n\tif (filename !== false)\r\n\t{\r\n\t\treturn filename\r\n\t}\r\n\r\n\t// rest resolvers\r\n\tif (require_hacker.global_hooks_enabled)\r\n\t{\r\n\t\tfor (let resolver of require_hacker.path_resolvers)\r\n\t\t{\r\n\t\t\tconst resolved = resolver.resolve(request, require_caller)\r\n\t\t\tif (exists(resolved))\r\n\t\t\t{\r\n\t\t\t\treturn resolved\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn false\r\n}\r\n\r\n// detect if it is a CommonJS module declaration\r\nfunction is_a_module_declaration(text)\r\n{\r\n\treturn text.indexOf('module.exports = ') === 0 ||\r\n\t\t/\\s+module\\.exports = .+/.test(text)\r\n}\r\n\r\nexport default require_hacker"]}